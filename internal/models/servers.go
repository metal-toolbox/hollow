// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Server is an object representing the database table.
type Server struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	FacilityCode null.String `boil:"facility_code" json:"facility_code,omitempty" toml:"facility_code" yaml:"facility_code,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt    null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *serverR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerColumns = struct {
	ID           string
	Name         string
	FacilityCode string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	Name:         "name",
	FacilityCode: "facility_code",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var ServerTableColumns = struct {
	ID           string
	Name         string
	FacilityCode string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "servers.id",
	Name:         "servers.name",
	FacilityCode: "servers.facility_code",
	CreatedAt:    "servers.created_at",
	UpdatedAt:    "servers.updated_at",
	DeletedAt:    "servers.deleted_at",
}

// Generated where

var ServerWhere = struct {
	ID           whereHelperstring
	Name         whereHelpernull_String
	FacilityCode whereHelpernull_String
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "\"servers\".\"id\""},
	Name:         whereHelpernull_String{field: "\"servers\".\"name\""},
	FacilityCode: whereHelpernull_String{field: "\"servers\".\"facility_code\""},
	CreatedAt:    whereHelpernull_Time{field: "\"servers\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"servers\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"servers\".\"deleted_at\""},
}

// ServerRels is where relationship names are stored.
var ServerRels = struct {
	Attributes          string
	ServerComponents    string
	VersionedAttributes string
}{
	Attributes:          "Attributes",
	ServerComponents:    "ServerComponents",
	VersionedAttributes: "VersionedAttributes",
}

// serverR is where relationships are stored.
type serverR struct {
	Attributes          AttributeSlice          `boil:"Attributes" json:"Attributes" toml:"Attributes" yaml:"Attributes"`
	ServerComponents    ServerComponentSlice    `boil:"ServerComponents" json:"ServerComponents" toml:"ServerComponents" yaml:"ServerComponents"`
	VersionedAttributes VersionedAttributeSlice `boil:"VersionedAttributes" json:"VersionedAttributes" toml:"VersionedAttributes" yaml:"VersionedAttributes"`
}

// NewStruct creates a new relationship struct
func (*serverR) NewStruct() *serverR {
	return &serverR{}
}

// serverL is where Load methods for each relationship are stored.
type serverL struct{}

var (
	serverAllColumns            = []string{"id", "name", "facility_code", "created_at", "updated_at", "deleted_at"}
	serverColumnsWithoutDefault = []string{}
	serverColumnsWithDefault    = []string{"id", "name", "facility_code", "created_at", "updated_at", "deleted_at"}
	serverPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServerSlice is an alias for a slice of pointers to Server.
	// This should almost always be used instead of []Server.
	ServerSlice []*Server
	// ServerHook is the signature for custom Server hook methods
	ServerHook func(context.Context, boil.ContextExecutor, *Server) error

	serverQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverType                 = reflect.TypeOf(&Server{})
	serverMapping              = queries.MakeStructMapping(serverType)
	serverPrimaryKeyMapping, _ = queries.BindMapping(serverType, serverMapping, serverPrimaryKeyColumns)
	serverInsertCacheMut       sync.RWMutex
	serverInsertCache          = make(map[string]insertCache)
	serverUpdateCacheMut       sync.RWMutex
	serverUpdateCache          = make(map[string]updateCache)
	serverUpsertCacheMut       sync.RWMutex
	serverUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverBeforeInsertHooks []ServerHook
var serverBeforeUpdateHooks []ServerHook
var serverBeforeDeleteHooks []ServerHook
var serverBeforeUpsertHooks []ServerHook

var serverAfterInsertHooks []ServerHook
var serverAfterSelectHooks []ServerHook
var serverAfterUpdateHooks []ServerHook
var serverAfterDeleteHooks []ServerHook
var serverAfterUpsertHooks []ServerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Server) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Server) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Server) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Server) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Server) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Server) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Server) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Server) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Server) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerHook registers your hook function for all future operations.
func AddServerHook(hookPoint boil.HookPoint, serverHook ServerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		serverBeforeInsertHooks = append(serverBeforeInsertHooks, serverHook)
	case boil.BeforeUpdateHook:
		serverBeforeUpdateHooks = append(serverBeforeUpdateHooks, serverHook)
	case boil.BeforeDeleteHook:
		serverBeforeDeleteHooks = append(serverBeforeDeleteHooks, serverHook)
	case boil.BeforeUpsertHook:
		serverBeforeUpsertHooks = append(serverBeforeUpsertHooks, serverHook)
	case boil.AfterInsertHook:
		serverAfterInsertHooks = append(serverAfterInsertHooks, serverHook)
	case boil.AfterSelectHook:
		serverAfterSelectHooks = append(serverAfterSelectHooks, serverHook)
	case boil.AfterUpdateHook:
		serverAfterUpdateHooks = append(serverAfterUpdateHooks, serverHook)
	case boil.AfterDeleteHook:
		serverAfterDeleteHooks = append(serverAfterDeleteHooks, serverHook)
	case boil.AfterUpsertHook:
		serverAfterUpsertHooks = append(serverAfterUpsertHooks, serverHook)
	}
}

// One returns a single server record from the query.
func (q serverQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Server, error) {
	o := &Server{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for servers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Server records from the query.
func (q serverQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSlice, error) {
	var o []*Server

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Server slice")
	}

	if len(serverAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Server records in the query.
func (q serverQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count servers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if servers exists")
	}

	return count > 0, nil
}

// Attributes retrieves all the attribute's Attributes with an executor.
func (o *Server) Attributes(mods ...qm.QueryMod) attributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attributes\".\"server_id\"=?", o.ID),
	)

	query := Attributes(queryMods...)
	queries.SetFrom(query.Query, "\"attributes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"attributes\".*"})
	}

	return query
}

// ServerComponents retrieves all the server_component's ServerComponents with an executor.
func (o *Server) ServerComponents(mods ...qm.QueryMod) serverComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_components\".\"server_id\"=?", o.ID),
	)

	query := ServerComponents(queryMods...)
	queries.SetFrom(query.Query, "\"server_components\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"server_components\".*"})
	}

	return query
}

// VersionedAttributes retrieves all the versioned_attribute's VersionedAttributes with an executor.
func (o *Server) VersionedAttributes(mods ...qm.QueryMod) versionedAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"versioned_attributes\".\"server_id\"=?", o.ID),
	)

	query := VersionedAttributes(queryMods...)
	queries.SetFrom(query.Query, "\"versioned_attributes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"versioned_attributes\".*"})
	}

	return query
}

// LoadAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.server_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attributes")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(attributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Attributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attributeR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ServerID) {
				local.R.Attributes = append(local.R.Attributes, foreign)
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// LoadServerComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadServerComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_components`),
		qm.WhereIn(`server_components.server_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_components")
	}

	var resultSlice []*ServerComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_components")
	}

	if len(serverComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServerComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverComponentR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServerID {
				local.R.ServerComponents = append(local.R.ServerComponents, foreign)
				if foreign.R == nil {
					foreign.R = &serverComponentR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// LoadVersionedAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadVersionedAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`versioned_attributes`),
		qm.WhereIn(`versioned_attributes.server_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load versioned_attributes")
	}

	var resultSlice []*VersionedAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice versioned_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on versioned_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for versioned_attributes")
	}

	if len(versionedAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionedAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &versionedAttributeR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ServerID) {
				local.R.VersionedAttributes = append(local.R.VersionedAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &versionedAttributeR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// AddAttributes adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.Attributes.
// Sets related.R.Server appropriately.
func (o *Server) AddAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Attribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ServerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, attributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ServerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serverR{
			Attributes: related,
		}
	} else {
		o.R.Attributes = append(o.R.Attributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attributeR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// SetAttributes removes all previously related items of the
// server replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Server's Attributes accordingly.
// Replaces o.R.Attributes with related.
// Sets related.R.Server's Attributes accordingly.
func (o *Server) SetAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Attribute) error {
	query := "update \"attributes\" set \"server_id\" = null where \"server_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Attributes {
			queries.SetScanner(&rel.ServerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Server = nil
		}

		o.R.Attributes = nil
	}
	return o.AddAttributes(ctx, exec, insert, related...)
}

// RemoveAttributes relationships from objects passed in.
// Removes related items from R.Attributes (uses pointer comparison, removal does not keep order)
// Sets related.R.Server.
func (o *Server) RemoveAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*Attribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ServerID, nil)
		if rel.R != nil {
			rel.R.Server = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("server_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Attributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Attributes)
			if ln > 1 && i < ln-1 {
				o.R.Attributes[i] = o.R.Attributes[ln-1]
			}
			o.R.Attributes = o.R.Attributes[:ln-1]
			break
		}
	}

	return nil
}

// AddServerComponents adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.ServerComponents.
// Sets related.R.Server appropriately.
func (o *Server) AddServerComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverR{
			ServerComponents: related,
		}
	} else {
		o.R.ServerComponents = append(o.R.ServerComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverComponentR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// AddVersionedAttributes adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.VersionedAttributes.
// Sets related.R.Server appropriately.
func (o *Server) AddVersionedAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VersionedAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ServerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"versioned_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, versionedAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ServerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serverR{
			VersionedAttributes: related,
		}
	} else {
		o.R.VersionedAttributes = append(o.R.VersionedAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &versionedAttributeR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// SetVersionedAttributes removes all previously related items of the
// server replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Server's VersionedAttributes accordingly.
// Replaces o.R.VersionedAttributes with related.
// Sets related.R.Server's VersionedAttributes accordingly.
func (o *Server) SetVersionedAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VersionedAttribute) error {
	query := "update \"versioned_attributes\" set \"server_id\" = null where \"server_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VersionedAttributes {
			queries.SetScanner(&rel.ServerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Server = nil
		}

		o.R.VersionedAttributes = nil
	}
	return o.AddVersionedAttributes(ctx, exec, insert, related...)
}

// RemoveVersionedAttributes relationships from objects passed in.
// Removes related items from R.VersionedAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.Server.
func (o *Server) RemoveVersionedAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*VersionedAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ServerID, nil)
		if rel.R != nil {
			rel.R.Server = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("server_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VersionedAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.VersionedAttributes)
			if ln > 1 && i < ln-1 {
				o.R.VersionedAttributes[i] = o.R.VersionedAttributes[ln-1]
			}
			o.R.VersionedAttributes = o.R.VersionedAttributes[:ln-1]
			break
		}
	}

	return nil
}

// Servers retrieves all the records using an executor.
func Servers(mods ...qm.QueryMod) serverQuery {
	mods = append(mods, qm.From("\"servers\""), qmhelper.WhereIsNull("\"servers\".\"deleted_at\""))
	return serverQuery{NewQuery(mods...)}
}

// FindServer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Server, error) {
	serverObj := &Server{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"servers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from servers")
	}

	if err = serverObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverObj, err
	}

	return serverObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Server) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no servers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverInsertCacheMut.RLock()
	cache, cached := serverInsertCache[key]
	serverInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverAllColumns,
			serverColumnsWithDefault,
			serverColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverType, serverMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverType, serverMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"servers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"servers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into servers")
	}

	if !cached {
		serverInsertCacheMut.Lock()
		serverInsertCache[key] = cache
		serverInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Server.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Server) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverUpdateCacheMut.RLock()
	cache, cached := serverUpdateCache[key]
	serverUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverAllColumns,
			serverPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update servers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"servers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverType, serverMapping, append(wl, serverPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update servers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for servers")
	}

	if !cached {
		serverUpdateCacheMut.Lock()
		serverUpdateCache[key] = cache
		serverUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for servers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for servers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"servers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in server slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all server")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Server) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no servers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverUpsertCacheMut.RLock()
	cache, cached := serverUpsertCache[key]
	serverUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverAllColumns,
			serverColumnsWithDefault,
			serverColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverAllColumns,
			serverPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert servers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverPrimaryKeyColumns))
			copy(conflict, serverPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"servers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverType, serverMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverType, serverMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert servers")
	}

	if !cached {
		serverUpsertCacheMut.Lock()
		serverUpsertCache[key] = cache
		serverUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Server record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Server) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Server provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverPrimaryKeyMapping)
		sql = "DELETE FROM \"servers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"servers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(serverType, serverMapping, append(wl, serverPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from servers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for servers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from servers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for servers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"servers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"servers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, serverPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for servers")
	}

	if len(serverAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Server) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"servers\".* FROM \"servers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSlice")
	}

	*o = slice

	return nil
}

// ServerExists checks if the Server row exists.
func ServerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"servers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if servers exists")
	}

	return exists, nil
}

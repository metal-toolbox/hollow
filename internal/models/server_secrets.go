// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServerSecret is an object representing the database table.
type ServerSecret struct {
	ID                 string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerID           string    `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	ServerSecretTypeID string    `boil:"server_secret_type_id" json:"server_secret_type_id" toml:"server_secret_type_id" yaml:"server_secret_type_id"`
	Value              string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *serverSecretR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverSecretL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerSecretColumns = struct {
	ID                 string
	ServerID           string
	ServerSecretTypeID string
	Value              string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	ServerID:           "server_id",
	ServerSecretTypeID: "server_secret_type_id",
	Value:              "value",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var ServerSecretTableColumns = struct {
	ID                 string
	ServerID           string
	ServerSecretTypeID string
	Value              string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "server_secrets.id",
	ServerID:           "server_secrets.server_id",
	ServerSecretTypeID: "server_secrets.server_secret_type_id",
	Value:              "server_secrets.value",
	CreatedAt:          "server_secrets.created_at",
	UpdatedAt:          "server_secrets.updated_at",
}

// Generated where

var ServerSecretWhere = struct {
	ID                 whereHelperstring
	ServerID           whereHelperstring
	ServerSecretTypeID whereHelperstring
	Value              whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"server_secrets\".\"id\""},
	ServerID:           whereHelperstring{field: "\"server_secrets\".\"server_id\""},
	ServerSecretTypeID: whereHelperstring{field: "\"server_secrets\".\"server_secret_type_id\""},
	Value:              whereHelperstring{field: "\"server_secrets\".\"value\""},
	CreatedAt:          whereHelpertime_Time{field: "\"server_secrets\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"server_secrets\".\"updated_at\""},
}

// ServerSecretRels is where relationship names are stored.
var ServerSecretRels = struct {
	ServerSecretType string
	Server           string
}{
	ServerSecretType: "ServerSecretType",
	Server:           "Server",
}

// serverSecretR is where relationships are stored.
type serverSecretR struct {
	ServerSecretType *ServerSecretType `boil:"ServerSecretType" json:"ServerSecretType" toml:"ServerSecretType" yaml:"ServerSecretType"`
	Server           *Server           `boil:"Server" json:"Server" toml:"Server" yaml:"Server"`
}

// NewStruct creates a new relationship struct
func (*serverSecretR) NewStruct() *serverSecretR {
	return &serverSecretR{}
}

func (r *serverSecretR) GetServerSecretType() *ServerSecretType {
	if r == nil {
		return nil
	}
	return r.ServerSecretType
}

func (r *serverSecretR) GetServer() *Server {
	if r == nil {
		return nil
	}
	return r.Server
}

// serverSecretL is where Load methods for each relationship are stored.
type serverSecretL struct{}

var (
	serverSecretAllColumns            = []string{"id", "server_id", "server_secret_type_id", "value", "created_at", "updated_at"}
	serverSecretColumnsWithoutDefault = []string{"server_id", "server_secret_type_id", "value", "created_at", "updated_at"}
	serverSecretColumnsWithDefault    = []string{"id"}
	serverSecretPrimaryKeyColumns     = []string{"id"}
	serverSecretGeneratedColumns      = []string{}
)

type (
	// ServerSecretSlice is an alias for a slice of pointers to ServerSecret.
	// This should almost always be used instead of []ServerSecret.
	ServerSecretSlice []*ServerSecret
	// ServerSecretHook is the signature for custom ServerSecret hook methods
	ServerSecretHook func(context.Context, boil.ContextExecutor, *ServerSecret) error

	serverSecretQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverSecretType                 = reflect.TypeOf(&ServerSecret{})
	serverSecretMapping              = queries.MakeStructMapping(serverSecretType)
	serverSecretPrimaryKeyMapping, _ = queries.BindMapping(serverSecretType, serverSecretMapping, serverSecretPrimaryKeyColumns)
	serverSecretInsertCacheMut       sync.RWMutex
	serverSecretInsertCache          = make(map[string]insertCache)
	serverSecretUpdateCacheMut       sync.RWMutex
	serverSecretUpdateCache          = make(map[string]updateCache)
	serverSecretUpsertCacheMut       sync.RWMutex
	serverSecretUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverSecretAfterSelectHooks []ServerSecretHook

var serverSecretBeforeInsertHooks []ServerSecretHook
var serverSecretAfterInsertHooks []ServerSecretHook

var serverSecretBeforeUpdateHooks []ServerSecretHook
var serverSecretAfterUpdateHooks []ServerSecretHook

var serverSecretBeforeDeleteHooks []ServerSecretHook
var serverSecretAfterDeleteHooks []ServerSecretHook

var serverSecretBeforeUpsertHooks []ServerSecretHook
var serverSecretAfterUpsertHooks []ServerSecretHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerSecret) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerSecret) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerSecret) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerSecret) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerSecret) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerSecret) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerSecret) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerSecret) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerSecret) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSecretAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerSecretHook registers your hook function for all future operations.
func AddServerSecretHook(hookPoint boil.HookPoint, serverSecretHook ServerSecretHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		serverSecretAfterSelectHooks = append(serverSecretAfterSelectHooks, serverSecretHook)
	case boil.BeforeInsertHook:
		serverSecretBeforeInsertHooks = append(serverSecretBeforeInsertHooks, serverSecretHook)
	case boil.AfterInsertHook:
		serverSecretAfterInsertHooks = append(serverSecretAfterInsertHooks, serverSecretHook)
	case boil.BeforeUpdateHook:
		serverSecretBeforeUpdateHooks = append(serverSecretBeforeUpdateHooks, serverSecretHook)
	case boil.AfterUpdateHook:
		serverSecretAfterUpdateHooks = append(serverSecretAfterUpdateHooks, serverSecretHook)
	case boil.BeforeDeleteHook:
		serverSecretBeforeDeleteHooks = append(serverSecretBeforeDeleteHooks, serverSecretHook)
	case boil.AfterDeleteHook:
		serverSecretAfterDeleteHooks = append(serverSecretAfterDeleteHooks, serverSecretHook)
	case boil.BeforeUpsertHook:
		serverSecretBeforeUpsertHooks = append(serverSecretBeforeUpsertHooks, serverSecretHook)
	case boil.AfterUpsertHook:
		serverSecretAfterUpsertHooks = append(serverSecretAfterUpsertHooks, serverSecretHook)
	}
}

// One returns a single serverSecret record from the query.
func (q serverSecretQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerSecret, error) {
	o := &ServerSecret{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_secrets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerSecret records from the query.
func (q serverSecretQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSecretSlice, error) {
	var o []*ServerSecret

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerSecret slice")
	}

	if len(serverSecretAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerSecret records in the query.
func (q serverSecretQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_secrets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverSecretQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_secrets exists")
	}

	return count > 0, nil
}

// ServerSecretType pointed to by the foreign key.
func (o *ServerSecret) ServerSecretType(mods ...qm.QueryMod) serverSecretTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerSecretTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ServerSecretTypes(queryMods...)
}

// Server pointed to by the foreign key.
func (o *ServerSecret) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerID),
	}

	queryMods = append(queryMods, mods...)

	return Servers(queryMods...)
}

// LoadServerSecretType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverSecretL) LoadServerSecretType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSecret interface{}, mods queries.Applicator) error {
	var slice []*ServerSecret
	var object *ServerSecret

	if singular {
		object = maybeServerSecret.(*ServerSecret)
	} else {
		slice = *maybeServerSecret.(*[]*ServerSecret)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSecretR{}
		}
		args = append(args, object.ServerSecretTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSecretR{}
			}

			for _, a := range args {
				if a == obj.ServerSecretTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ServerSecretTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_secret_types`),
		qm.WhereIn(`server_secret_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerSecretType")
	}

	var resultSlice []*ServerSecretType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerSecretType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_secret_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_secret_types")
	}

	if len(serverSecretAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerSecretType = foreign
		if foreign.R == nil {
			foreign.R = &serverSecretTypeR{}
		}
		foreign.R.ServerSecrets = append(foreign.R.ServerSecrets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerSecretTypeID == foreign.ID {
				local.R.ServerSecretType = foreign
				if foreign.R == nil {
					foreign.R = &serverSecretTypeR{}
				}
				foreign.R.ServerSecrets = append(foreign.R.ServerSecrets, local)
				break
			}
		}
	}

	return nil
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverSecretL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSecret interface{}, mods queries.Applicator) error {
	var slice []*ServerSecret
	var object *ServerSecret

	if singular {
		object = maybeServerSecret.(*ServerSecret)
	} else {
		slice = *maybeServerSecret.(*[]*ServerSecret)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSecretR{}
		}
		args = append(args, object.ServerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSecretR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverSecretAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.ServerSecrets = append(foreign.R.ServerSecrets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.ServerSecrets = append(foreign.R.ServerSecrets, local)
				break
			}
		}
	}

	return nil
}

// SetServerSecretType of the serverSecret to the related item.
// Sets o.R.ServerSecretType to related.
// Adds o to related.R.ServerSecrets.
func (o *ServerSecret) SetServerSecretType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerSecretType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_secret_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverSecretPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerSecretTypeID = related.ID
	if o.R == nil {
		o.R = &serverSecretR{
			ServerSecretType: related,
		}
	} else {
		o.R.ServerSecretType = related
	}

	if related.R == nil {
		related.R = &serverSecretTypeR{
			ServerSecrets: ServerSecretSlice{o},
		}
	} else {
		related.R.ServerSecrets = append(related.R.ServerSecrets, o)
	}

	return nil
}

// SetServer of the serverSecret to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.ServerSecrets.
func (o *ServerSecret) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverSecretPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &serverSecretR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			ServerSecrets: ServerSecretSlice{o},
		}
	} else {
		related.R.ServerSecrets = append(related.R.ServerSecrets, o)
	}

	return nil
}

// ServerSecrets retrieves all the records using an executor.
func ServerSecrets(mods ...qm.QueryMod) serverSecretQuery {
	mods = append(mods, qm.From("\"server_secrets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"server_secrets\".*"})
	}

	return serverSecretQuery{q}
}

// FindServerSecret retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerSecret(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerSecret, error) {
	serverSecretObj := &ServerSecret{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_secrets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverSecretObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_secrets")
	}

	if err = serverSecretObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverSecretObj, err
	}

	return serverSecretObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerSecret) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_secrets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSecretColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverSecretInsertCacheMut.RLock()
	cache, cached := serverSecretInsertCache[key]
	serverSecretInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverSecretAllColumns,
			serverSecretColumnsWithDefault,
			serverSecretColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverSecretType, serverSecretMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverSecretType, serverSecretMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_secrets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_secrets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_secrets")
	}

	if !cached {
		serverSecretInsertCacheMut.Lock()
		serverSecretInsertCache[key] = cache
		serverSecretInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerSecret.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerSecret) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverSecretUpdateCacheMut.RLock()
	cache, cached := serverSecretUpdateCache[key]
	serverSecretUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverSecretAllColumns,
			serverSecretPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_secrets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_secrets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverSecretPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverSecretType, serverSecretMapping, append(wl, serverSecretPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_secrets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_secrets")
	}

	if !cached {
		serverSecretUpdateCacheMut.Lock()
		serverSecretUpdateCache[key] = cache
		serverSecretUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverSecretQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_secrets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSecretSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverSecretPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverSecret")
	}
	return rowsAff, nil
}

// Delete deletes a single ServerSecret record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerSecret) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerSecret provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverSecretPrimaryKeyMapping)
	sql := "DELETE FROM \"server_secrets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_secrets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverSecretQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverSecretQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_secrets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSecretSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverSecretBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_secrets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSecretPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_secrets")
	}

	if len(serverSecretAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerSecret) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerSecret(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSecretSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSecretSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_secrets\".* FROM \"server_secrets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSecretPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSecretSlice")
	}

	*o = slice

	return nil
}

// ServerSecretExists checks if the ServerSecret row exists.
func ServerSecretExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_secrets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_secrets exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerSecret) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_secrets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSecretColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverSecretUpsertCacheMut.RLock()
	cache, cached := serverSecretUpsertCache[key]
	serverSecretUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverSecretAllColumns,
			serverSecretColumnsWithDefault,
			serverSecretColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverSecretAllColumns,
			serverSecretPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_secrets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverSecretPrimaryKeyColumns))
			copy(conflict, serverSecretPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_secrets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverSecretType, serverSecretMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverSecretType, serverSecretMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_secrets")
	}

	if !cached {
		serverSecretUpsertCacheMut.Lock()
		serverSecretUpsertCache[key] = cache
		serverSecretUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

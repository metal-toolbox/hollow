// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testServerSecretsUpsert(t *testing.T) {
	t.Parallel()

	if len(serverSecretAllColumns) == len(serverSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerSecret{}
	if err = randomize.Struct(seed, &o, serverSecretDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerSecret: %s", err)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverSecretDBTypes, false, serverSecretPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerSecret: %s", err)
	}

	count, err = ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerSecrets(t *testing.T) {
	t.Parallel()

	query := ServerSecrets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerSecretsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerSecretsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerSecrets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerSecretsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerSecretSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerSecretsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerSecretExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerSecret exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerSecretExists to return true, but got false.")
	}
}

func testServerSecretsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverSecretFound, err := FindServerSecret(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverSecretFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerSecretsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerSecrets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerSecretsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerSecrets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerSecretsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverSecretOne := &ServerSecret{}
	serverSecretTwo := &ServerSecret{}
	if err = randomize.Struct(seed, serverSecretOne, serverSecretDBTypes, false, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}
	if err = randomize.Struct(seed, serverSecretTwo, serverSecretDBTypes, false, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverSecretOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverSecretTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerSecrets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerSecretsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverSecretOne := &ServerSecret{}
	serverSecretTwo := &ServerSecret{}
	if err = randomize.Struct(seed, serverSecretOne, serverSecretDBTypes, false, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}
	if err = randomize.Struct(seed, serverSecretTwo, serverSecretDBTypes, false, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverSecretOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverSecretTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverSecretBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func serverSecretAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSecret) error {
	*o = ServerSecret{}
	return nil
}

func testServerSecretsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerSecret{}
	o := &ServerSecret{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverSecretDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerSecret object: %s", err)
	}

	AddServerSecretHook(boil.BeforeInsertHook, serverSecretBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverSecretBeforeInsertHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.AfterInsertHook, serverSecretAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverSecretAfterInsertHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.AfterSelectHook, serverSecretAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverSecretAfterSelectHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.BeforeUpdateHook, serverSecretBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverSecretBeforeUpdateHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.AfterUpdateHook, serverSecretAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverSecretAfterUpdateHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.BeforeDeleteHook, serverSecretBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverSecretBeforeDeleteHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.AfterDeleteHook, serverSecretAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverSecretAfterDeleteHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.BeforeUpsertHook, serverSecretBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverSecretBeforeUpsertHooks = []ServerSecretHook{}

	AddServerSecretHook(boil.AfterUpsertHook, serverSecretAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverSecretAfterUpsertHooks = []ServerSecretHook{}
}

func testServerSecretsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerSecretsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverSecretColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerSecretToOneServerSecretTypeUsingServerSecretType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerSecret
	var foreign ServerSecretType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverSecretDBTypes, false, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverSecretTypeDBTypes, false, serverSecretTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecretType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerSecretTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerSecretType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerSecretSlice{&local}
	if err = local.L.LoadServerSecretType(ctx, tx, false, (*[]*ServerSecret)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerSecretType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerSecretType = nil
	if err = local.L.LoadServerSecretType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerSecretType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerSecretToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerSecret
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverSecretDBTypes, false, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerSecretSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*ServerSecret)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerSecretToOneSetOpServerSecretTypeUsingServerSecretType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerSecret
	var b, c ServerSecretType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverSecretDBTypes, false, strmangle.SetComplement(serverSecretPrimaryKeyColumns, serverSecretColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverSecretTypeDBTypes, false, strmangle.SetComplement(serverSecretTypePrimaryKeyColumns, serverSecretTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverSecretTypeDBTypes, false, strmangle.SetComplement(serverSecretTypePrimaryKeyColumns, serverSecretTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerSecretType{&b, &c} {
		err = a.SetServerSecretType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerSecretType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerSecrets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerSecretTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerSecretTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerSecretTypeID))
		reflect.Indirect(reflect.ValueOf(&a.ServerSecretTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerSecretTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerSecretTypeID, x.ID)
		}
	}
}
func testServerSecretToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerSecret
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverSecretDBTypes, false, strmangle.SetComplement(serverSecretPrimaryKeyColumns, serverSecretColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerSecrets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}

func testServerSecretsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerSecretsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerSecretSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerSecretsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerSecrets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverSecretDBTypes = map[string]string{`ID`: `uuid`, `ServerID`: `uuid`, `ServerSecretTypeID`: `uuid`, `Value`: `string`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                   = bytes.MinRead
)

func testServerSecretsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverSecretAllColumns) == len(serverSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerSecretsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverSecretAllColumns) == len(serverSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerSecret{}
	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverSecretDBTypes, true, serverSecretPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerSecret struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverSecretAllColumns, serverSecretPrimaryKeyColumns) {
		fields = serverSecretAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverSecretAllColumns,
			serverSecretPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerSecretSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

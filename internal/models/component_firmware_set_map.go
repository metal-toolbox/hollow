// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ComponentFirmwareSetMap is an object representing the database table.
type ComponentFirmwareSetMap struct {
	ID            string `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirmwareSetID string `boil:"firmware_set_id" json:"firmware_set_id" toml:"firmware_set_id" yaml:"firmware_set_id"`
	FirmwareID    string `boil:"firmware_id" json:"firmware_id" toml:"firmware_id" yaml:"firmware_id"`

	R *componentFirmwareSetMapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentFirmwareSetMapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentFirmwareSetMapColumns = struct {
	ID            string
	FirmwareSetID string
	FirmwareID    string
}{
	ID:            "id",
	FirmwareSetID: "firmware_set_id",
	FirmwareID:    "firmware_id",
}

var ComponentFirmwareSetMapTableColumns = struct {
	ID            string
	FirmwareSetID string
	FirmwareID    string
}{
	ID:            "component_firmware_set_map.id",
	FirmwareSetID: "component_firmware_set_map.firmware_set_id",
	FirmwareID:    "component_firmware_set_map.firmware_id",
}

// Generated where

var ComponentFirmwareSetMapWhere = struct {
	ID            whereHelperstring
	FirmwareSetID whereHelperstring
	FirmwareID    whereHelperstring
}{
	ID:            whereHelperstring{field: "\"component_firmware_set_map\".\"id\""},
	FirmwareSetID: whereHelperstring{field: "\"component_firmware_set_map\".\"firmware_set_id\""},
	FirmwareID:    whereHelperstring{field: "\"component_firmware_set_map\".\"firmware_id\""},
}

// ComponentFirmwareSetMapRels is where relationship names are stored.
var ComponentFirmwareSetMapRels = struct {
	FirmwareSet string
	Firmware    string
}{
	FirmwareSet: "FirmwareSet",
	Firmware:    "Firmware",
}

// componentFirmwareSetMapR is where relationships are stored.
type componentFirmwareSetMapR struct {
	FirmwareSet *ComponentFirmwareSet     `boil:"FirmwareSet" json:"FirmwareSet" toml:"FirmwareSet" yaml:"FirmwareSet"`
	Firmware    *ComponentFirmwareVersion `boil:"Firmware" json:"Firmware" toml:"Firmware" yaml:"Firmware"`
}

// NewStruct creates a new relationship struct
func (*componentFirmwareSetMapR) NewStruct() *componentFirmwareSetMapR {
	return &componentFirmwareSetMapR{}
}

func (r *componentFirmwareSetMapR) GetFirmwareSet() *ComponentFirmwareSet {
	if r == nil {
		return nil
	}
	return r.FirmwareSet
}

func (r *componentFirmwareSetMapR) GetFirmware() *ComponentFirmwareVersion {
	if r == nil {
		return nil
	}
	return r.Firmware
}

// componentFirmwareSetMapL is where Load methods for each relationship are stored.
type componentFirmwareSetMapL struct{}

var (
	componentFirmwareSetMapAllColumns            = []string{"id", "firmware_set_id", "firmware_id"}
	componentFirmwareSetMapColumnsWithoutDefault = []string{"firmware_set_id", "firmware_id"}
	componentFirmwareSetMapColumnsWithDefault    = []string{"id"}
	componentFirmwareSetMapPrimaryKeyColumns     = []string{"id"}
	componentFirmwareSetMapGeneratedColumns      = []string{}
)

type (
	// ComponentFirmwareSetMapSlice is an alias for a slice of pointers to ComponentFirmwareSetMap.
	// This should almost always be used instead of []ComponentFirmwareSetMap.
	ComponentFirmwareSetMapSlice []*ComponentFirmwareSetMap
	// ComponentFirmwareSetMapHook is the signature for custom ComponentFirmwareSetMap hook methods
	ComponentFirmwareSetMapHook func(context.Context, boil.ContextExecutor, *ComponentFirmwareSetMap) error

	componentFirmwareSetMapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentFirmwareSetMapType                 = reflect.TypeOf(&ComponentFirmwareSetMap{})
	componentFirmwareSetMapMapping              = queries.MakeStructMapping(componentFirmwareSetMapType)
	componentFirmwareSetMapPrimaryKeyMapping, _ = queries.BindMapping(componentFirmwareSetMapType, componentFirmwareSetMapMapping, componentFirmwareSetMapPrimaryKeyColumns)
	componentFirmwareSetMapInsertCacheMut       sync.RWMutex
	componentFirmwareSetMapInsertCache          = make(map[string]insertCache)
	componentFirmwareSetMapUpdateCacheMut       sync.RWMutex
	componentFirmwareSetMapUpdateCache          = make(map[string]updateCache)
	componentFirmwareSetMapUpsertCacheMut       sync.RWMutex
	componentFirmwareSetMapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentFirmwareSetMapAfterSelectHooks []ComponentFirmwareSetMapHook

var componentFirmwareSetMapBeforeInsertHooks []ComponentFirmwareSetMapHook
var componentFirmwareSetMapAfterInsertHooks []ComponentFirmwareSetMapHook

var componentFirmwareSetMapBeforeUpdateHooks []ComponentFirmwareSetMapHook
var componentFirmwareSetMapAfterUpdateHooks []ComponentFirmwareSetMapHook

var componentFirmwareSetMapBeforeDeleteHooks []ComponentFirmwareSetMapHook
var componentFirmwareSetMapAfterDeleteHooks []ComponentFirmwareSetMapHook

var componentFirmwareSetMapBeforeUpsertHooks []ComponentFirmwareSetMapHook
var componentFirmwareSetMapAfterUpsertHooks []ComponentFirmwareSetMapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentFirmwareSetMap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentFirmwareSetMap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentFirmwareSetMap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentFirmwareSetMap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentFirmwareSetMap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentFirmwareSetMap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentFirmwareSetMap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentFirmwareSetMap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentFirmwareSetMap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareSetMapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentFirmwareSetMapHook registers your hook function for all future operations.
func AddComponentFirmwareSetMapHook(hookPoint boil.HookPoint, componentFirmwareSetMapHook ComponentFirmwareSetMapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentFirmwareSetMapAfterSelectHooks = append(componentFirmwareSetMapAfterSelectHooks, componentFirmwareSetMapHook)
	case boil.BeforeInsertHook:
		componentFirmwareSetMapBeforeInsertHooks = append(componentFirmwareSetMapBeforeInsertHooks, componentFirmwareSetMapHook)
	case boil.AfterInsertHook:
		componentFirmwareSetMapAfterInsertHooks = append(componentFirmwareSetMapAfterInsertHooks, componentFirmwareSetMapHook)
	case boil.BeforeUpdateHook:
		componentFirmwareSetMapBeforeUpdateHooks = append(componentFirmwareSetMapBeforeUpdateHooks, componentFirmwareSetMapHook)
	case boil.AfterUpdateHook:
		componentFirmwareSetMapAfterUpdateHooks = append(componentFirmwareSetMapAfterUpdateHooks, componentFirmwareSetMapHook)
	case boil.BeforeDeleteHook:
		componentFirmwareSetMapBeforeDeleteHooks = append(componentFirmwareSetMapBeforeDeleteHooks, componentFirmwareSetMapHook)
	case boil.AfterDeleteHook:
		componentFirmwareSetMapAfterDeleteHooks = append(componentFirmwareSetMapAfterDeleteHooks, componentFirmwareSetMapHook)
	case boil.BeforeUpsertHook:
		componentFirmwareSetMapBeforeUpsertHooks = append(componentFirmwareSetMapBeforeUpsertHooks, componentFirmwareSetMapHook)
	case boil.AfterUpsertHook:
		componentFirmwareSetMapAfterUpsertHooks = append(componentFirmwareSetMapAfterUpsertHooks, componentFirmwareSetMapHook)
	}
}

// One returns a single componentFirmwareSetMap record from the query.
func (q componentFirmwareSetMapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentFirmwareSetMap, error) {
	o := &ComponentFirmwareSetMap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_firmware_set_map")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentFirmwareSetMap records from the query.
func (q componentFirmwareSetMapQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentFirmwareSetMapSlice, error) {
	var o []*ComponentFirmwareSetMap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentFirmwareSetMap slice")
	}

	if len(componentFirmwareSetMapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentFirmwareSetMap records in the query.
func (q componentFirmwareSetMapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_firmware_set_map rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentFirmwareSetMapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_firmware_set_map exists")
	}

	return count > 0, nil
}

// FirmwareSet pointed to by the foreign key.
func (o *ComponentFirmwareSetMap) FirmwareSet(mods ...qm.QueryMod) componentFirmwareSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FirmwareSetID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentFirmwareSets(queryMods...)
}

// Firmware pointed to by the foreign key.
func (o *ComponentFirmwareSetMap) Firmware(mods ...qm.QueryMod) componentFirmwareVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FirmwareID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentFirmwareVersions(queryMods...)
}

// LoadFirmwareSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentFirmwareSetMapL) LoadFirmwareSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentFirmwareSetMap interface{}, mods queries.Applicator) error {
	var slice []*ComponentFirmwareSetMap
	var object *ComponentFirmwareSetMap

	if singular {
		object = maybeComponentFirmwareSetMap.(*ComponentFirmwareSetMap)
	} else {
		slice = *maybeComponentFirmwareSetMap.(*[]*ComponentFirmwareSetMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentFirmwareSetMapR{}
		}
		args = append(args, object.FirmwareSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentFirmwareSetMapR{}
			}

			for _, a := range args {
				if a == obj.FirmwareSetID {
					continue Outer
				}
			}

			args = append(args, obj.FirmwareSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_firmware_set`),
		qm.WhereIn(`component_firmware_set.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentFirmwareSet")
	}

	var resultSlice []*ComponentFirmwareSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentFirmwareSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_firmware_set")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_firmware_set")
	}

	if len(componentFirmwareSetMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FirmwareSet = foreign
		if foreign.R == nil {
			foreign.R = &componentFirmwareSetR{}
		}
		foreign.R.FirmwareSetComponentFirmwareSetMaps = append(foreign.R.FirmwareSetComponentFirmwareSetMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FirmwareSetID == foreign.ID {
				local.R.FirmwareSet = foreign
				if foreign.R == nil {
					foreign.R = &componentFirmwareSetR{}
				}
				foreign.R.FirmwareSetComponentFirmwareSetMaps = append(foreign.R.FirmwareSetComponentFirmwareSetMaps, local)
				break
			}
		}
	}

	return nil
}

// LoadFirmware allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentFirmwareSetMapL) LoadFirmware(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentFirmwareSetMap interface{}, mods queries.Applicator) error {
	var slice []*ComponentFirmwareSetMap
	var object *ComponentFirmwareSetMap

	if singular {
		object = maybeComponentFirmwareSetMap.(*ComponentFirmwareSetMap)
	} else {
		slice = *maybeComponentFirmwareSetMap.(*[]*ComponentFirmwareSetMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentFirmwareSetMapR{}
		}
		args = append(args, object.FirmwareID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentFirmwareSetMapR{}
			}

			for _, a := range args {
				if a == obj.FirmwareID {
					continue Outer
				}
			}

			args = append(args, obj.FirmwareID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_firmware_version`),
		qm.WhereIn(`component_firmware_version.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentFirmwareVersion")
	}

	var resultSlice []*ComponentFirmwareVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentFirmwareVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_firmware_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_firmware_version")
	}

	if len(componentFirmwareSetMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Firmware = foreign
		if foreign.R == nil {
			foreign.R = &componentFirmwareVersionR{}
		}
		foreign.R.FirmwareComponentFirmwareSetMaps = append(foreign.R.FirmwareComponentFirmwareSetMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FirmwareID == foreign.ID {
				local.R.Firmware = foreign
				if foreign.R == nil {
					foreign.R = &componentFirmwareVersionR{}
				}
				foreign.R.FirmwareComponentFirmwareSetMaps = append(foreign.R.FirmwareComponentFirmwareSetMaps, local)
				break
			}
		}
	}

	return nil
}

// SetFirmwareSet of the componentFirmwareSetMap to the related item.
// Sets o.R.FirmwareSet to related.
// Adds o to related.R.FirmwareSetComponentFirmwareSetMaps.
func (o *ComponentFirmwareSetMap) SetFirmwareSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentFirmwareSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_firmware_set_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"firmware_set_id"}),
		strmangle.WhereClause("\"", "\"", 2, componentFirmwareSetMapPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FirmwareSetID = related.ID
	if o.R == nil {
		o.R = &componentFirmwareSetMapR{
			FirmwareSet: related,
		}
	} else {
		o.R.FirmwareSet = related
	}

	if related.R == nil {
		related.R = &componentFirmwareSetR{
			FirmwareSetComponentFirmwareSetMaps: ComponentFirmwareSetMapSlice{o},
		}
	} else {
		related.R.FirmwareSetComponentFirmwareSetMaps = append(related.R.FirmwareSetComponentFirmwareSetMaps, o)
	}

	return nil
}

// SetFirmware of the componentFirmwareSetMap to the related item.
// Sets o.R.Firmware to related.
// Adds o to related.R.FirmwareComponentFirmwareSetMaps.
func (o *ComponentFirmwareSetMap) SetFirmware(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentFirmwareVersion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_firmware_set_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"firmware_id"}),
		strmangle.WhereClause("\"", "\"", 2, componentFirmwareSetMapPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FirmwareID = related.ID
	if o.R == nil {
		o.R = &componentFirmwareSetMapR{
			Firmware: related,
		}
	} else {
		o.R.Firmware = related
	}

	if related.R == nil {
		related.R = &componentFirmwareVersionR{
			FirmwareComponentFirmwareSetMaps: ComponentFirmwareSetMapSlice{o},
		}
	} else {
		related.R.FirmwareComponentFirmwareSetMaps = append(related.R.FirmwareComponentFirmwareSetMaps, o)
	}

	return nil
}

// ComponentFirmwareSetMaps retrieves all the records using an executor.
func ComponentFirmwareSetMaps(mods ...qm.QueryMod) componentFirmwareSetMapQuery {
	mods = append(mods, qm.From("\"component_firmware_set_map\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_firmware_set_map\".*"})
	}

	return componentFirmwareSetMapQuery{q}
}

// FindComponentFirmwareSetMap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentFirmwareSetMap(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ComponentFirmwareSetMap, error) {
	componentFirmwareSetMapObj := &ComponentFirmwareSetMap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_firmware_set_map\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, componentFirmwareSetMapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_firmware_set_map")
	}

	if err = componentFirmwareSetMapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentFirmwareSetMapObj, err
	}

	return componentFirmwareSetMapObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentFirmwareSetMap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_firmware_set_map provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentFirmwareSetMapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentFirmwareSetMapInsertCacheMut.RLock()
	cache, cached := componentFirmwareSetMapInsertCache[key]
	componentFirmwareSetMapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentFirmwareSetMapAllColumns,
			componentFirmwareSetMapColumnsWithDefault,
			componentFirmwareSetMapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentFirmwareSetMapType, componentFirmwareSetMapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentFirmwareSetMapType, componentFirmwareSetMapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_firmware_set_map\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_firmware_set_map\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_firmware_set_map")
	}

	if !cached {
		componentFirmwareSetMapInsertCacheMut.Lock()
		componentFirmwareSetMapInsertCache[key] = cache
		componentFirmwareSetMapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentFirmwareSetMap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentFirmwareSetMap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentFirmwareSetMapUpdateCacheMut.RLock()
	cache, cached := componentFirmwareSetMapUpdateCache[key]
	componentFirmwareSetMapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentFirmwareSetMapAllColumns,
			componentFirmwareSetMapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_firmware_set_map, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_firmware_set_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, componentFirmwareSetMapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentFirmwareSetMapType, componentFirmwareSetMapMapping, append(wl, componentFirmwareSetMapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_firmware_set_map row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_firmware_set_map")
	}

	if !cached {
		componentFirmwareSetMapUpdateCacheMut.Lock()
		componentFirmwareSetMapUpdateCache[key] = cache
		componentFirmwareSetMapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentFirmwareSetMapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_firmware_set_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_firmware_set_map")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentFirmwareSetMapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentFirmwareSetMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_firmware_set_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, componentFirmwareSetMapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentFirmwareSetMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentFirmwareSetMap")
	}
	return rowsAff, nil
}

// Delete deletes a single ComponentFirmwareSetMap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentFirmwareSetMap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentFirmwareSetMap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentFirmwareSetMapPrimaryKeyMapping)
	sql := "DELETE FROM \"component_firmware_set_map\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_firmware_set_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_firmware_set_map")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentFirmwareSetMapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentFirmwareSetMapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_firmware_set_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_firmware_set_map")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentFirmwareSetMapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentFirmwareSetMapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentFirmwareSetMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_firmware_set_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentFirmwareSetMapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentFirmwareSetMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_firmware_set_map")
	}

	if len(componentFirmwareSetMapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentFirmwareSetMap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentFirmwareSetMap(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentFirmwareSetMapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentFirmwareSetMapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentFirmwareSetMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_firmware_set_map\".* FROM \"component_firmware_set_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentFirmwareSetMapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentFirmwareSetMapSlice")
	}

	*o = slice

	return nil
}

// ComponentFirmwareSetMapExists checks if the ComponentFirmwareSetMap row exists.
func ComponentFirmwareSetMapExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_firmware_set_map\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_firmware_set_map exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentFirmwareSetMap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_firmware_set_map provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentFirmwareSetMapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentFirmwareSetMapUpsertCacheMut.RLock()
	cache, cached := componentFirmwareSetMapUpsertCache[key]
	componentFirmwareSetMapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentFirmwareSetMapAllColumns,
			componentFirmwareSetMapColumnsWithDefault,
			componentFirmwareSetMapColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			componentFirmwareSetMapAllColumns,
			componentFirmwareSetMapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_firmware_set_map, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentFirmwareSetMapPrimaryKeyColumns))
			copy(conflict, componentFirmwareSetMapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"component_firmware_set_map\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentFirmwareSetMapType, componentFirmwareSetMapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentFirmwareSetMapType, componentFirmwareSetMapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_firmware_set_map")
	}

	if !cached {
		componentFirmwareSetMapUpsertCacheMut.Lock()
		componentFirmwareSetMapUpsertCache[key] = cache
		componentFirmwareSetMapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

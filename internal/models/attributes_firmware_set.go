// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AttributesFirmwareSet is an object representing the database table.
type AttributesFirmwareSet struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirmwareSetID null.String `boil:"firmware_set_id" json:"firmware_set_id,omitempty" toml:"firmware_set_id" yaml:"firmware_set_id,omitempty"`
	Namespace     string      `boil:"namespace" json:"namespace" toml:"namespace" yaml:"namespace"`
	Data          types.JSON  `boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt     null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *attributesFirmwareSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributesFirmwareSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributesFirmwareSetColumns = struct {
	ID            string
	FirmwareSetID string
	Namespace     string
	Data          string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	FirmwareSetID: "firmware_set_id",
	Namespace:     "namespace",
	Data:          "data",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var AttributesFirmwareSetTableColumns = struct {
	ID            string
	FirmwareSetID string
	Namespace     string
	Data          string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "attributes_firmware_set.id",
	FirmwareSetID: "attributes_firmware_set.firmware_set_id",
	Namespace:     "attributes_firmware_set.namespace",
	Data:          "attributes_firmware_set.data",
	CreatedAt:     "attributes_firmware_set.created_at",
	UpdatedAt:     "attributes_firmware_set.updated_at",
}

// Generated where

var AttributesFirmwareSetWhere = struct {
	ID            whereHelperstring
	FirmwareSetID whereHelpernull_String
	Namespace     whereHelperstring
	Data          whereHelpertypes_JSON
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"attributes_firmware_set\".\"id\""},
	FirmwareSetID: whereHelpernull_String{field: "\"attributes_firmware_set\".\"firmware_set_id\""},
	Namespace:     whereHelperstring{field: "\"attributes_firmware_set\".\"namespace\""},
	Data:          whereHelpertypes_JSON{field: "\"attributes_firmware_set\".\"data\""},
	CreatedAt:     whereHelpernull_Time{field: "\"attributes_firmware_set\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"attributes_firmware_set\".\"updated_at\""},
}

// AttributesFirmwareSetRels is where relationship names are stored.
var AttributesFirmwareSetRels = struct {
	FirmwareSet string
}{
	FirmwareSet: "FirmwareSet",
}

// attributesFirmwareSetR is where relationships are stored.
type attributesFirmwareSetR struct {
	FirmwareSet *ComponentFirmwareSet `boil:"FirmwareSet" json:"FirmwareSet" toml:"FirmwareSet" yaml:"FirmwareSet"`
}

// NewStruct creates a new relationship struct
func (*attributesFirmwareSetR) NewStruct() *attributesFirmwareSetR {
	return &attributesFirmwareSetR{}
}

func (r *attributesFirmwareSetR) GetFirmwareSet() *ComponentFirmwareSet {
	if r == nil {
		return nil
	}
	return r.FirmwareSet
}

// attributesFirmwareSetL is where Load methods for each relationship are stored.
type attributesFirmwareSetL struct{}

var (
	attributesFirmwareSetAllColumns            = []string{"id", "firmware_set_id", "namespace", "data", "created_at", "updated_at"}
	attributesFirmwareSetColumnsWithoutDefault = []string{"namespace", "data"}
	attributesFirmwareSetColumnsWithDefault    = []string{"id", "firmware_set_id", "created_at", "updated_at"}
	attributesFirmwareSetPrimaryKeyColumns     = []string{"id"}
	attributesFirmwareSetGeneratedColumns      = []string{}
)

type (
	// AttributesFirmwareSetSlice is an alias for a slice of pointers to AttributesFirmwareSet.
	// This should almost always be used instead of []AttributesFirmwareSet.
	AttributesFirmwareSetSlice []*AttributesFirmwareSet
	// AttributesFirmwareSetHook is the signature for custom AttributesFirmwareSet hook methods
	AttributesFirmwareSetHook func(context.Context, boil.ContextExecutor, *AttributesFirmwareSet) error

	attributesFirmwareSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributesFirmwareSetType                 = reflect.TypeOf(&AttributesFirmwareSet{})
	attributesFirmwareSetMapping              = queries.MakeStructMapping(attributesFirmwareSetType)
	attributesFirmwareSetPrimaryKeyMapping, _ = queries.BindMapping(attributesFirmwareSetType, attributesFirmwareSetMapping, attributesFirmwareSetPrimaryKeyColumns)
	attributesFirmwareSetInsertCacheMut       sync.RWMutex
	attributesFirmwareSetInsertCache          = make(map[string]insertCache)
	attributesFirmwareSetUpdateCacheMut       sync.RWMutex
	attributesFirmwareSetUpdateCache          = make(map[string]updateCache)
	attributesFirmwareSetUpsertCacheMut       sync.RWMutex
	attributesFirmwareSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attributesFirmwareSetAfterSelectHooks []AttributesFirmwareSetHook

var attributesFirmwareSetBeforeInsertHooks []AttributesFirmwareSetHook
var attributesFirmwareSetAfterInsertHooks []AttributesFirmwareSetHook

var attributesFirmwareSetBeforeUpdateHooks []AttributesFirmwareSetHook
var attributesFirmwareSetAfterUpdateHooks []AttributesFirmwareSetHook

var attributesFirmwareSetBeforeDeleteHooks []AttributesFirmwareSetHook
var attributesFirmwareSetAfterDeleteHooks []AttributesFirmwareSetHook

var attributesFirmwareSetBeforeUpsertHooks []AttributesFirmwareSetHook
var attributesFirmwareSetAfterUpsertHooks []AttributesFirmwareSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttributesFirmwareSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttributesFirmwareSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttributesFirmwareSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttributesFirmwareSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttributesFirmwareSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttributesFirmwareSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttributesFirmwareSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttributesFirmwareSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttributesFirmwareSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributesFirmwareSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributesFirmwareSetHook registers your hook function for all future operations.
func AddAttributesFirmwareSetHook(hookPoint boil.HookPoint, attributesFirmwareSetHook AttributesFirmwareSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attributesFirmwareSetAfterSelectHooks = append(attributesFirmwareSetAfterSelectHooks, attributesFirmwareSetHook)
	case boil.BeforeInsertHook:
		attributesFirmwareSetBeforeInsertHooks = append(attributesFirmwareSetBeforeInsertHooks, attributesFirmwareSetHook)
	case boil.AfterInsertHook:
		attributesFirmwareSetAfterInsertHooks = append(attributesFirmwareSetAfterInsertHooks, attributesFirmwareSetHook)
	case boil.BeforeUpdateHook:
		attributesFirmwareSetBeforeUpdateHooks = append(attributesFirmwareSetBeforeUpdateHooks, attributesFirmwareSetHook)
	case boil.AfterUpdateHook:
		attributesFirmwareSetAfterUpdateHooks = append(attributesFirmwareSetAfterUpdateHooks, attributesFirmwareSetHook)
	case boil.BeforeDeleteHook:
		attributesFirmwareSetBeforeDeleteHooks = append(attributesFirmwareSetBeforeDeleteHooks, attributesFirmwareSetHook)
	case boil.AfterDeleteHook:
		attributesFirmwareSetAfterDeleteHooks = append(attributesFirmwareSetAfterDeleteHooks, attributesFirmwareSetHook)
	case boil.BeforeUpsertHook:
		attributesFirmwareSetBeforeUpsertHooks = append(attributesFirmwareSetBeforeUpsertHooks, attributesFirmwareSetHook)
	case boil.AfterUpsertHook:
		attributesFirmwareSetAfterUpsertHooks = append(attributesFirmwareSetAfterUpsertHooks, attributesFirmwareSetHook)
	}
}

// One returns a single attributesFirmwareSet record from the query.
func (q attributesFirmwareSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributesFirmwareSet, error) {
	o := &AttributesFirmwareSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attributes_firmware_set")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AttributesFirmwareSet records from the query.
func (q attributesFirmwareSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributesFirmwareSetSlice, error) {
	var o []*AttributesFirmwareSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AttributesFirmwareSet slice")
	}

	if len(attributesFirmwareSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AttributesFirmwareSet records in the query.
func (q attributesFirmwareSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attributes_firmware_set rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributesFirmwareSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attributes_firmware_set exists")
	}

	return count > 0, nil
}

// FirmwareSet pointed to by the foreign key.
func (o *AttributesFirmwareSet) FirmwareSet(mods ...qm.QueryMod) componentFirmwareSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FirmwareSetID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentFirmwareSets(queryMods...)
}

// LoadFirmwareSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributesFirmwareSetL) LoadFirmwareSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributesFirmwareSet interface{}, mods queries.Applicator) error {
	var slice []*AttributesFirmwareSet
	var object *AttributesFirmwareSet

	if singular {
		object = maybeAttributesFirmwareSet.(*AttributesFirmwareSet)
	} else {
		slice = *maybeAttributesFirmwareSet.(*[]*AttributesFirmwareSet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributesFirmwareSetR{}
		}
		if !queries.IsNil(object.FirmwareSetID) {
			args = append(args, object.FirmwareSetID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributesFirmwareSetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FirmwareSetID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FirmwareSetID) {
				args = append(args, obj.FirmwareSetID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_firmware_set`),
		qm.WhereIn(`component_firmware_set.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentFirmwareSet")
	}

	var resultSlice []*ComponentFirmwareSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentFirmwareSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_firmware_set")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_firmware_set")
	}

	if len(attributesFirmwareSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FirmwareSet = foreign
		if foreign.R == nil {
			foreign.R = &componentFirmwareSetR{}
		}
		foreign.R.FirmwareSetAttributesFirmwareSets = append(foreign.R.FirmwareSetAttributesFirmwareSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FirmwareSetID, foreign.ID) {
				local.R.FirmwareSet = foreign
				if foreign.R == nil {
					foreign.R = &componentFirmwareSetR{}
				}
				foreign.R.FirmwareSetAttributesFirmwareSets = append(foreign.R.FirmwareSetAttributesFirmwareSets, local)
				break
			}
		}
	}

	return nil
}

// SetFirmwareSet of the attributesFirmwareSet to the related item.
// Sets o.R.FirmwareSet to related.
// Adds o to related.R.FirmwareSetAttributesFirmwareSets.
func (o *AttributesFirmwareSet) SetFirmwareSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentFirmwareSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attributes_firmware_set\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"firmware_set_id"}),
		strmangle.WhereClause("\"", "\"", 2, attributesFirmwareSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FirmwareSetID, related.ID)
	if o.R == nil {
		o.R = &attributesFirmwareSetR{
			FirmwareSet: related,
		}
	} else {
		o.R.FirmwareSet = related
	}

	if related.R == nil {
		related.R = &componentFirmwareSetR{
			FirmwareSetAttributesFirmwareSets: AttributesFirmwareSetSlice{o},
		}
	} else {
		related.R.FirmwareSetAttributesFirmwareSets = append(related.R.FirmwareSetAttributesFirmwareSets, o)
	}

	return nil
}

// RemoveFirmwareSet relationship.
// Sets o.R.FirmwareSet to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributesFirmwareSet) RemoveFirmwareSet(ctx context.Context, exec boil.ContextExecutor, related *ComponentFirmwareSet) error {
	var err error

	queries.SetScanner(&o.FirmwareSetID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("firmware_set_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FirmwareSet = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FirmwareSetAttributesFirmwareSets {
		if queries.Equal(o.FirmwareSetID, ri.FirmwareSetID) {
			continue
		}

		ln := len(related.R.FirmwareSetAttributesFirmwareSets)
		if ln > 1 && i < ln-1 {
			related.R.FirmwareSetAttributesFirmwareSets[i] = related.R.FirmwareSetAttributesFirmwareSets[ln-1]
		}
		related.R.FirmwareSetAttributesFirmwareSets = related.R.FirmwareSetAttributesFirmwareSets[:ln-1]
		break
	}
	return nil
}

// AttributesFirmwareSets retrieves all the records using an executor.
func AttributesFirmwareSets(mods ...qm.QueryMod) attributesFirmwareSetQuery {
	mods = append(mods, qm.From("\"attributes_firmware_set\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attributes_firmware_set\".*"})
	}

	return attributesFirmwareSetQuery{q}
}

// FindAttributesFirmwareSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributesFirmwareSet(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AttributesFirmwareSet, error) {
	attributesFirmwareSetObj := &AttributesFirmwareSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attributes_firmware_set\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attributesFirmwareSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attributes_firmware_set")
	}

	if err = attributesFirmwareSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attributesFirmwareSetObj, err
	}

	return attributesFirmwareSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributesFirmwareSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attributes_firmware_set provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributesFirmwareSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributesFirmwareSetInsertCacheMut.RLock()
	cache, cached := attributesFirmwareSetInsertCache[key]
	attributesFirmwareSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributesFirmwareSetAllColumns,
			attributesFirmwareSetColumnsWithDefault,
			attributesFirmwareSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributesFirmwareSetType, attributesFirmwareSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributesFirmwareSetType, attributesFirmwareSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attributes_firmware_set\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attributes_firmware_set\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attributes_firmware_set")
	}

	if !cached {
		attributesFirmwareSetInsertCacheMut.Lock()
		attributesFirmwareSetInsertCache[key] = cache
		attributesFirmwareSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AttributesFirmwareSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributesFirmwareSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributesFirmwareSetUpdateCacheMut.RLock()
	cache, cached := attributesFirmwareSetUpdateCache[key]
	attributesFirmwareSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributesFirmwareSetAllColumns,
			attributesFirmwareSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attributes_firmware_set, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attributes_firmware_set\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributesFirmwareSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributesFirmwareSetType, attributesFirmwareSetMapping, append(wl, attributesFirmwareSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attributes_firmware_set row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attributes_firmware_set")
	}

	if !cached {
		attributesFirmwareSetUpdateCacheMut.Lock()
		attributesFirmwareSetUpdateCache[key] = cache
		attributesFirmwareSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attributesFirmwareSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attributes_firmware_set")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attributes_firmware_set")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributesFirmwareSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributesFirmwareSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attributes_firmware_set\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributesFirmwareSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attributesFirmwareSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attributesFirmwareSet")
	}
	return rowsAff, nil
}

// Delete deletes a single AttributesFirmwareSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributesFirmwareSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AttributesFirmwareSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributesFirmwareSetPrimaryKeyMapping)
	sql := "DELETE FROM \"attributes_firmware_set\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attributes_firmware_set")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attributes_firmware_set")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributesFirmwareSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributesFirmwareSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributes_firmware_set")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attributes_firmware_set")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributesFirmwareSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attributesFirmwareSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributesFirmwareSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attributes_firmware_set\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributesFirmwareSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributesFirmwareSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attributes_firmware_set")
	}

	if len(attributesFirmwareSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributesFirmwareSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributesFirmwareSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributesFirmwareSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributesFirmwareSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributesFirmwareSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attributes_firmware_set\".* FROM \"attributes_firmware_set\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributesFirmwareSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributesFirmwareSetSlice")
	}

	*o = slice

	return nil
}

// AttributesFirmwareSetExists checks if the AttributesFirmwareSet row exists.
func AttributesFirmwareSetExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attributes_firmware_set\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attributes_firmware_set exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributesFirmwareSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attributes_firmware_set provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributesFirmwareSetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributesFirmwareSetUpsertCacheMut.RLock()
	cache, cached := attributesFirmwareSetUpsertCache[key]
	attributesFirmwareSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributesFirmwareSetAllColumns,
			attributesFirmwareSetColumnsWithDefault,
			attributesFirmwareSetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			attributesFirmwareSetAllColumns,
			attributesFirmwareSetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attributes_firmware_set, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributesFirmwareSetPrimaryKeyColumns))
			copy(conflict, attributesFirmwareSetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"attributes_firmware_set\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributesFirmwareSetType, attributesFirmwareSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributesFirmwareSetType, attributesFirmwareSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attributes_firmware_set")
	}

	if !cached {
		attributesFirmwareSetUpsertCacheMut.Lock()
		attributesFirmwareSetUpsertCache[key] = cache
		attributesFirmwareSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

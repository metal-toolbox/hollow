// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVersionedAttributes(t *testing.T) {
	t.Parallel()

	query := VersionedAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVersionedAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVersionedAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VersionedAttributes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVersionedAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VersionedAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVersionedAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VersionedAttributeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VersionedAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VersionedAttributeExists to return true, but got false.")
	}
}

func testVersionedAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	versionedAttributeFound, err := FindVersionedAttribute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if versionedAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVersionedAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VersionedAttributes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVersionedAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VersionedAttributes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVersionedAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	versionedAttributeOne := &VersionedAttribute{}
	versionedAttributeTwo := &VersionedAttribute{}
	if err = randomize.Struct(seed, versionedAttributeOne, versionedAttributeDBTypes, false, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, versionedAttributeTwo, versionedAttributeDBTypes, false, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = versionedAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = versionedAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VersionedAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVersionedAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	versionedAttributeOne := &VersionedAttribute{}
	versionedAttributeTwo := &VersionedAttribute{}
	if err = randomize.Struct(seed, versionedAttributeOne, versionedAttributeDBTypes, false, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, versionedAttributeTwo, versionedAttributeDBTypes, false, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = versionedAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = versionedAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func versionedAttributeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func versionedAttributeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VersionedAttribute) error {
	*o = VersionedAttribute{}
	return nil
}

func testVersionedAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VersionedAttribute{}
	o := &VersionedAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute object: %s", err)
	}

	AddVersionedAttributeHook(boil.BeforeInsertHook, versionedAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	versionedAttributeBeforeInsertHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.AfterInsertHook, versionedAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	versionedAttributeAfterInsertHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.AfterSelectHook, versionedAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	versionedAttributeAfterSelectHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.BeforeUpdateHook, versionedAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	versionedAttributeBeforeUpdateHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.AfterUpdateHook, versionedAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	versionedAttributeAfterUpdateHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.BeforeDeleteHook, versionedAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	versionedAttributeBeforeDeleteHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.AfterDeleteHook, versionedAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	versionedAttributeAfterDeleteHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.BeforeUpsertHook, versionedAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	versionedAttributeBeforeUpsertHooks = []VersionedAttributeHook{}

	AddVersionedAttributeHook(boil.AfterUpsertHook, versionedAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	versionedAttributeAfterUpsertHooks = []VersionedAttributeHook{}
}

func testVersionedAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVersionedAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(versionedAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVersionedAttributeToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VersionedAttribute
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ServerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VersionedAttributeSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*VersionedAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVersionedAttributeToOneServerComponentUsingServerComponent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VersionedAttribute
	var foreign ServerComponent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ServerComponentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerComponent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VersionedAttributeSlice{&local}
	if err = local.L.LoadServerComponent(ctx, tx, false, (*[]*VersionedAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerComponent = nil
	if err = local.L.LoadServerComponent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVersionedAttributeToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VersionedAttribute
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VersionedAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ServerID, x.ID) {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ServerID, x.ID) {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}

func testVersionedAttributeToOneRemoveOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VersionedAttribute
	var b Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetServer(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveServer(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Server().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Server != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ServerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VersionedAttributes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVersionedAttributeToOneSetOpServerComponentUsingServerComponent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VersionedAttribute
	var b, c ServerComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerComponent{&b, &c} {
		err = a.SetServerComponent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerComponent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VersionedAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ServerComponentID, x.ID) {
			t.Error("foreign key was wrong value", a.ServerComponentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerComponentID))
		reflect.Indirect(reflect.ValueOf(&a.ServerComponentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ServerComponentID, x.ID) {
			t.Error("foreign key was wrong value", a.ServerComponentID, x.ID)
		}
	}
}

func testVersionedAttributeToOneRemoveOpServerComponentUsingServerComponent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VersionedAttribute
	var b ServerComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetServerComponent(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveServerComponent(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ServerComponent().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ServerComponent != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ServerComponentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VersionedAttributes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVersionedAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVersionedAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VersionedAttributeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVersionedAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VersionedAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	versionedAttributeDBTypes = map[string]string{`ID`: `uuid`, `ServerID`: `uuid`, `Namespace`: `string`, `Data`: `jsonb`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `ServerComponentID`: `uuid`, `Tally`: `int8`}
	_                         = bytes.MinRead
)

func testVersionedAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(versionedAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(versionedAttributeAllColumns) == len(versionedAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVersionedAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(versionedAttributeAllColumns) == len(versionedAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VersionedAttribute{}
	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, versionedAttributeDBTypes, true, versionedAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(versionedAttributeAllColumns, versionedAttributePrimaryKeyColumns) {
		fields = versionedAttributeAllColumns
	} else {
		fields = strmangle.SetComplement(
			versionedAttributeAllColumns,
			versionedAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VersionedAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVersionedAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(versionedAttributeAllColumns) == len(versionedAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VersionedAttribute{}
	if err = randomize.Struct(seed, &o, versionedAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VersionedAttribute: %s", err)
	}

	count, err := VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, versionedAttributeDBTypes, false, versionedAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VersionedAttribute struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VersionedAttribute: %s", err)
	}

	count, err = VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

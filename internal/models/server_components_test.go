// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerComponents(t *testing.T) {
	t.Parallel()

	query := ServerComponents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerComponentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerComponentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerComponents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerComponentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerComponentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerComponentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerComponentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerComponent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerComponentExists to return true, but got false.")
	}
}

func testServerComponentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverComponentFound, err := FindServerComponent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverComponentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerComponentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerComponents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerComponentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerComponents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerComponentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverComponentOne := &ServerComponent{}
	serverComponentTwo := &ServerComponent{}
	if err = randomize.Struct(seed, serverComponentOne, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, serverComponentTwo, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerComponentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverComponentOne := &ServerComponent{}
	serverComponentTwo := &ServerComponent{}
	if err = randomize.Struct(seed, serverComponentOne, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, serverComponentTwo, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverComponentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func serverComponentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
	*o = ServerComponent{}
	return nil
}

func testServerComponentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerComponent{}
	o := &ServerComponent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerComponent object: %s", err)
	}

	AddServerComponentHook(boil.BeforeInsertHook, serverComponentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverComponentBeforeInsertHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.AfterInsertHook, serverComponentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverComponentAfterInsertHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.AfterSelectHook, serverComponentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverComponentAfterSelectHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.BeforeUpdateHook, serverComponentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverComponentBeforeUpdateHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.AfterUpdateHook, serverComponentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverComponentAfterUpdateHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.BeforeDeleteHook, serverComponentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverComponentBeforeDeleteHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.AfterDeleteHook, serverComponentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverComponentAfterDeleteHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.BeforeUpsertHook, serverComponentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverComponentBeforeUpsertHooks = []ServerComponentHook{}

	AddServerComponentHook(boil.AfterUpsertHook, serverComponentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverComponentAfterUpsertHooks = []ServerComponentHook{}
}

func testServerComponentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerComponentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverComponentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerComponentToManyAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ServerComponentID, a.ID)
	queries.Assign(&c.ServerComponentID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Attributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ServerComponentID, b.ServerComponentID) {
			bFound = true
		}
		if queries.Equal(v.ServerComponentID, c.ServerComponentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServerComponentSlice{&a}
	if err = a.L.LoadAttributes(ctx, tx, false, (*[]*ServerComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Attributes = nil
	if err = a.L.LoadAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServerComponentToManyVersionedAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c VersionedAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, versionedAttributeDBTypes, false, versionedAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, versionedAttributeDBTypes, false, versionedAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ServerComponentID, a.ID)
	queries.Assign(&c.ServerComponentID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VersionedAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ServerComponentID, b.ServerComponentID) {
			bFound = true
		}
		if queries.Equal(v.ServerComponentID, c.ServerComponentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServerComponentSlice{&a}
	if err = a.L.LoadVersionedAttributes(ctx, tx, false, (*[]*ServerComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VersionedAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VersionedAttributes = nil
	if err = a.L.LoadVersionedAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VersionedAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServerComponentToManyAddOpAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c, d, e Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Attribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ServerComponentID) {
			t.Error("foreign key was wrong value", a.ID, first.ServerComponentID)
		}
		if !queries.Equal(a.ID, second.ServerComponentID) {
			t.Error("foreign key was wrong value", a.ID, second.ServerComponentID)
		}

		if first.R.ServerComponent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServerComponent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Attributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Attributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Attributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServerComponentToManySetOpAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c, d, e Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Attributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Attributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServerComponentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServerComponentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ServerComponentID) {
		t.Error("foreign key was wrong value", a.ID, d.ServerComponentID)
	}
	if !queries.Equal(a.ID, e.ServerComponentID) {
		t.Error("foreign key was wrong value", a.ID, e.ServerComponentID)
	}

	if b.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServerComponent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ServerComponent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Attributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Attributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServerComponentToManyRemoveOpAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c, d, e Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Attributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Attributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServerComponentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServerComponentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServerComponent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ServerComponent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Attributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Attributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Attributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServerComponentToManyAddOpVersionedAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c, d, e VersionedAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VersionedAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VersionedAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVersionedAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ServerComponentID) {
			t.Error("foreign key was wrong value", a.ID, first.ServerComponentID)
		}
		if !queries.Equal(a.ID, second.ServerComponentID) {
			t.Error("foreign key was wrong value", a.ID, second.ServerComponentID)
		}

		if first.R.ServerComponent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServerComponent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VersionedAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VersionedAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VersionedAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServerComponentToManySetOpVersionedAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c, d, e VersionedAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VersionedAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVersionedAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVersionedAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServerComponentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServerComponentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ServerComponentID) {
		t.Error("foreign key was wrong value", a.ID, d.ServerComponentID)
	}
	if !queries.Equal(a.ID, e.ServerComponentID) {
		t.Error("foreign key was wrong value", a.ID, e.ServerComponentID)
	}

	if b.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServerComponent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ServerComponent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VersionedAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VersionedAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServerComponentToManyRemoveOpVersionedAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c, d, e VersionedAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VersionedAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, versionedAttributeDBTypes, false, strmangle.SetComplement(versionedAttributePrimaryKeyColumns, versionedAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVersionedAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVersionedAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VersionedAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServerComponentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServerComponentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServerComponent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServerComponent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ServerComponent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VersionedAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VersionedAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VersionedAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServerComponentToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerComponent
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerComponentSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*ServerComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerComponentToOneServerComponentTypeUsingServerComponentType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerComponent
	var foreign ServerComponentType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverComponentTypeDBTypes, false, serverComponentTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponentType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerComponentTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerComponentType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerComponentSlice{&local}
	if err = local.L.LoadServerComponentType(ctx, tx, false, (*[]*ServerComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponentType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerComponentType = nil
	if err = local.L.LoadServerComponentType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponentType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerComponentToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}
func testServerComponentToOneSetOpServerComponentTypeUsingServerComponentType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerComponent
	var b, c ServerComponentType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverComponentTypeDBTypes, false, strmangle.SetComplement(serverComponentTypePrimaryKeyColumns, serverComponentTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverComponentTypeDBTypes, false, strmangle.SetComplement(serverComponentTypePrimaryKeyColumns, serverComponentTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerComponentType{&b, &c} {
		err = a.SetServerComponentType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerComponentType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerComponentTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerComponentTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerComponentTypeID))
		reflect.Indirect(reflect.ValueOf(&a.ServerComponentTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerComponentTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerComponentTypeID, x.ID)
		}
	}
}

func testServerComponentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerComponentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerComponentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerComponentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverComponentDBTypes = map[string]string{`ID`: `uuid`, `Name`: `string`, `Vendor`: `string`, `Model`: `string`, `Serial`: `string`, `ServerComponentTypeID`: `uuid`, `ServerID`: `uuid`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                      = bytes.MinRead
)

func testServerComponentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverComponentAllColumns) == len(serverComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerComponentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverComponentAllColumns) == len(serverComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerComponent{}
	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverComponentDBTypes, true, serverComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverComponentAllColumns, serverComponentPrimaryKeyColumns) {
		fields = serverComponentAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverComponentAllColumns,
			serverComponentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerComponentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServerComponentsUpsert(t *testing.T) {
	t.Parallel()

	if len(serverComponentAllColumns) == len(serverComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerComponent{}
	if err = randomize.Struct(seed, &o, serverComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerComponent: %s", err)
	}

	count, err := ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverComponentDBTypes, false, serverComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerComponent: %s", err)
	}

	count, err = ServerComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

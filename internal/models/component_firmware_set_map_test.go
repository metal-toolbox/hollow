// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testComponentFirmwareSetMapsUpsert(t *testing.T) {
	t.Parallel()

	if len(componentFirmwareSetMapAllColumns) == len(componentFirmwareSetMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, &o, componentFirmwareSetMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ComponentFirmwareSetMap: %s", err)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ComponentFirmwareSetMap: %s", err)
	}

	count, err = ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testComponentFirmwareSetMaps(t *testing.T) {
	t.Parallel()

	query := ComponentFirmwareSetMaps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testComponentFirmwareSetMapsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testComponentFirmwareSetMapsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ComponentFirmwareSetMaps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testComponentFirmwareSetMapsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ComponentFirmwareSetMapSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testComponentFirmwareSetMapsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ComponentFirmwareSetMapExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ComponentFirmwareSetMap exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ComponentFirmwareSetMapExists to return true, but got false.")
	}
}

func testComponentFirmwareSetMapsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	componentFirmwareSetMapFound, err := FindComponentFirmwareSetMap(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if componentFirmwareSetMapFound == nil {
		t.Error("want a record, got nil")
	}
}

func testComponentFirmwareSetMapsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ComponentFirmwareSetMaps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testComponentFirmwareSetMapsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ComponentFirmwareSetMaps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testComponentFirmwareSetMapsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	componentFirmwareSetMapOne := &ComponentFirmwareSetMap{}
	componentFirmwareSetMapTwo := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, componentFirmwareSetMapOne, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}
	if err = randomize.Struct(seed, componentFirmwareSetMapTwo, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = componentFirmwareSetMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = componentFirmwareSetMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ComponentFirmwareSetMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testComponentFirmwareSetMapsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	componentFirmwareSetMapOne := &ComponentFirmwareSetMap{}
	componentFirmwareSetMapTwo := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, componentFirmwareSetMapOne, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}
	if err = randomize.Struct(seed, componentFirmwareSetMapTwo, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = componentFirmwareSetMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = componentFirmwareSetMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func componentFirmwareSetMapBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func componentFirmwareSetMapAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSetMap) error {
	*o = ComponentFirmwareSetMap{}
	return nil
}

func testComponentFirmwareSetMapsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ComponentFirmwareSetMap{}
	o := &ComponentFirmwareSetMap{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap object: %s", err)
	}

	AddComponentFirmwareSetMapHook(boil.BeforeInsertHook, componentFirmwareSetMapBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapBeforeInsertHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.AfterInsertHook, componentFirmwareSetMapAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapAfterInsertHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.AfterSelectHook, componentFirmwareSetMapAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapAfterSelectHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.BeforeUpdateHook, componentFirmwareSetMapBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapBeforeUpdateHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.AfterUpdateHook, componentFirmwareSetMapAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapAfterUpdateHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.BeforeDeleteHook, componentFirmwareSetMapBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapBeforeDeleteHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.AfterDeleteHook, componentFirmwareSetMapAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapAfterDeleteHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.BeforeUpsertHook, componentFirmwareSetMapBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapBeforeUpsertHooks = []ComponentFirmwareSetMapHook{}

	AddComponentFirmwareSetMapHook(boil.AfterUpsertHook, componentFirmwareSetMapAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	componentFirmwareSetMapAfterUpsertHooks = []ComponentFirmwareSetMapHook{}
}

func testComponentFirmwareSetMapsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testComponentFirmwareSetMapsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(componentFirmwareSetMapColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testComponentFirmwareSetMapToOneComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ComponentFirmwareSetMap
	var foreign ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, componentFirmwareSetDBTypes, false, componentFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FirmwareSetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FirmwareSet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ComponentFirmwareSetMapSlice{&local}
	if err = local.L.LoadFirmwareSet(ctx, tx, false, (*[]*ComponentFirmwareSetMap)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FirmwareSet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FirmwareSet = nil
	if err = local.L.LoadFirmwareSet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FirmwareSet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testComponentFirmwareSetMapToOneComponentFirmwareVersionUsingFirmware(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ComponentFirmwareSetMap
	var foreign ComponentFirmwareVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, componentFirmwareSetMapDBTypes, false, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, componentFirmwareVersionDBTypes, false, componentFirmwareVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareVersion struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FirmwareID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Firmware().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ComponentFirmwareSetMapSlice{&local}
	if err = local.L.LoadFirmware(ctx, tx, false, (*[]*ComponentFirmwareSetMap)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Firmware == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Firmware = nil
	if err = local.L.LoadFirmware(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Firmware == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testComponentFirmwareSetMapToOneSetOpComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ComponentFirmwareSetMap
	var b, c ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, componentFirmwareSetMapDBTypes, false, strmangle.SetComplement(componentFirmwareSetMapPrimaryKeyColumns, componentFirmwareSetMapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ComponentFirmwareSet{&b, &c} {
		err = a.SetFirmwareSet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FirmwareSet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FirmwareSetComponentFirmwareSetMaps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FirmwareSetID != x.ID {
			t.Error("foreign key was wrong value", a.FirmwareSetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FirmwareSetID))
		reflect.Indirect(reflect.ValueOf(&a.FirmwareSetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FirmwareSetID != x.ID {
			t.Error("foreign key was wrong value", a.FirmwareSetID, x.ID)
		}
	}
}
func testComponentFirmwareSetMapToOneSetOpComponentFirmwareVersionUsingFirmware(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ComponentFirmwareSetMap
	var b, c ComponentFirmwareVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, componentFirmwareSetMapDBTypes, false, strmangle.SetComplement(componentFirmwareSetMapPrimaryKeyColumns, componentFirmwareSetMapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, componentFirmwareVersionDBTypes, false, strmangle.SetComplement(componentFirmwareVersionPrimaryKeyColumns, componentFirmwareVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, componentFirmwareVersionDBTypes, false, strmangle.SetComplement(componentFirmwareVersionPrimaryKeyColumns, componentFirmwareVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ComponentFirmwareVersion{&b, &c} {
		err = a.SetFirmware(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Firmware != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FirmwareComponentFirmwareSetMaps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FirmwareID != x.ID {
			t.Error("foreign key was wrong value", a.FirmwareID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FirmwareID))
		reflect.Indirect(reflect.ValueOf(&a.FirmwareID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FirmwareID != x.ID {
			t.Error("foreign key was wrong value", a.FirmwareID, x.ID)
		}
	}
}

func testComponentFirmwareSetMapsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testComponentFirmwareSetMapsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ComponentFirmwareSetMapSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testComponentFirmwareSetMapsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ComponentFirmwareSetMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	componentFirmwareSetMapDBTypes = map[string]string{`ID`: `uuid`, `FirmwareSetID`: `uuid`, `FirmwareID`: `uuid`}
	_                              = bytes.MinRead
)

func testComponentFirmwareSetMapsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(componentFirmwareSetMapPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(componentFirmwareSetMapAllColumns) == len(componentFirmwareSetMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testComponentFirmwareSetMapsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(componentFirmwareSetMapAllColumns) == len(componentFirmwareSetMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ComponentFirmwareSetMap{}
	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentFirmwareSetMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, componentFirmwareSetMapDBTypes, true, componentFirmwareSetMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSetMap struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(componentFirmwareSetMapAllColumns, componentFirmwareSetMapPrimaryKeyColumns) {
		fields = componentFirmwareSetMapAllColumns
	} else {
		fields = strmangle.SetComplement(
			componentFirmwareSetMapAllColumns,
			componentFirmwareSetMapPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ComponentFirmwareSetMapSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

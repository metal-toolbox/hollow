// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ComponentFirmwareVersion is an object representing the database table.
type ComponentFirmwareVersion struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Component     string    `boil:"component" json:"component" toml:"component" yaml:"component"`
	Vendor        string    `boil:"vendor" json:"vendor" toml:"vendor" yaml:"vendor"`
	Model         string    `boil:"model" json:"model" toml:"model" yaml:"model"`
	Filename      string    `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`
	Version       string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Checksum      string    `boil:"checksum" json:"checksum" toml:"checksum" yaml:"checksum"`
	UpstreamURL   string    `boil:"upstream_url" json:"upstream_url" toml:"upstream_url" yaml:"upstream_url"`
	RepositoryURL string    `boil:"repository_url" json:"repository_url" toml:"repository_url" yaml:"repository_url"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *componentFirmwareVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentFirmwareVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentFirmwareVersionColumns = struct {
	ID            string
	Component     string
	Vendor        string
	Model         string
	Filename      string
	Version       string
	Checksum      string
	UpstreamURL   string
	RepositoryURL string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Component:     "component",
	Vendor:        "vendor",
	Model:         "model",
	Filename:      "filename",
	Version:       "version",
	Checksum:      "checksum",
	UpstreamURL:   "upstream_url",
	RepositoryURL: "repository_url",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var ComponentFirmwareVersionTableColumns = struct {
	ID            string
	Component     string
	Vendor        string
	Model         string
	Filename      string
	Version       string
	Checksum      string
	UpstreamURL   string
	RepositoryURL string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "component_firmware_version.id",
	Component:     "component_firmware_version.component",
	Vendor:        "component_firmware_version.vendor",
	Model:         "component_firmware_version.model",
	Filename:      "component_firmware_version.filename",
	Version:       "component_firmware_version.version",
	Checksum:      "component_firmware_version.checksum",
	UpstreamURL:   "component_firmware_version.upstream_url",
	RepositoryURL: "component_firmware_version.repository_url",
	CreatedAt:     "component_firmware_version.created_at",
	UpdatedAt:     "component_firmware_version.updated_at",
}

// Generated where

var ComponentFirmwareVersionWhere = struct {
	ID            whereHelperstring
	Component     whereHelperstring
	Vendor        whereHelperstring
	Model         whereHelperstring
	Filename      whereHelperstring
	Version       whereHelperstring
	Checksum      whereHelperstring
	UpstreamURL   whereHelperstring
	RepositoryURL whereHelperstring
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"component_firmware_version\".\"id\""},
	Component:     whereHelperstring{field: "\"component_firmware_version\".\"component\""},
	Vendor:        whereHelperstring{field: "\"component_firmware_version\".\"vendor\""},
	Model:         whereHelperstring{field: "\"component_firmware_version\".\"model\""},
	Filename:      whereHelperstring{field: "\"component_firmware_version\".\"filename\""},
	Version:       whereHelperstring{field: "\"component_firmware_version\".\"version\""},
	Checksum:      whereHelperstring{field: "\"component_firmware_version\".\"checksum\""},
	UpstreamURL:   whereHelperstring{field: "\"component_firmware_version\".\"upstream_url\""},
	RepositoryURL: whereHelperstring{field: "\"component_firmware_version\".\"repository_url\""},
	CreatedAt:     whereHelpernull_Time{field: "\"component_firmware_version\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"component_firmware_version\".\"updated_at\""},
}

// ComponentFirmwareVersionRels is where relationship names are stored.
var ComponentFirmwareVersionRels = struct {
}{}

// componentFirmwareVersionR is where relationships are stored.
type componentFirmwareVersionR struct {
}

// NewStruct creates a new relationship struct
func (*componentFirmwareVersionR) NewStruct() *componentFirmwareVersionR {
	return &componentFirmwareVersionR{}
}

// componentFirmwareVersionL is where Load methods for each relationship are stored.
type componentFirmwareVersionL struct{}

var (
	componentFirmwareVersionAllColumns            = []string{"id", "component", "vendor", "model", "filename", "version", "checksum", "upstream_url", "repository_url", "created_at", "updated_at"}
	componentFirmwareVersionColumnsWithoutDefault = []string{"component", "vendor", "model", "filename", "version", "checksum", "upstream_url", "repository_url"}
	componentFirmwareVersionColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	componentFirmwareVersionPrimaryKeyColumns     = []string{"id"}
	componentFirmwareVersionGeneratedColumns      = []string{}
)

type (
	// ComponentFirmwareVersionSlice is an alias for a slice of pointers to ComponentFirmwareVersion.
	// This should almost always be used instead of []ComponentFirmwareVersion.
	ComponentFirmwareVersionSlice []*ComponentFirmwareVersion
	// ComponentFirmwareVersionHook is the signature for custom ComponentFirmwareVersion hook methods
	ComponentFirmwareVersionHook func(context.Context, boil.ContextExecutor, *ComponentFirmwareVersion) error

	componentFirmwareVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentFirmwareVersionType                 = reflect.TypeOf(&ComponentFirmwareVersion{})
	componentFirmwareVersionMapping              = queries.MakeStructMapping(componentFirmwareVersionType)
	componentFirmwareVersionPrimaryKeyMapping, _ = queries.BindMapping(componentFirmwareVersionType, componentFirmwareVersionMapping, componentFirmwareVersionPrimaryKeyColumns)
	componentFirmwareVersionInsertCacheMut       sync.RWMutex
	componentFirmwareVersionInsertCache          = make(map[string]insertCache)
	componentFirmwareVersionUpdateCacheMut       sync.RWMutex
	componentFirmwareVersionUpdateCache          = make(map[string]updateCache)
	componentFirmwareVersionUpsertCacheMut       sync.RWMutex
	componentFirmwareVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentFirmwareVersionAfterSelectHooks []ComponentFirmwareVersionHook

var componentFirmwareVersionBeforeInsertHooks []ComponentFirmwareVersionHook
var componentFirmwareVersionAfterInsertHooks []ComponentFirmwareVersionHook

var componentFirmwareVersionBeforeUpdateHooks []ComponentFirmwareVersionHook
var componentFirmwareVersionAfterUpdateHooks []ComponentFirmwareVersionHook

var componentFirmwareVersionBeforeDeleteHooks []ComponentFirmwareVersionHook
var componentFirmwareVersionAfterDeleteHooks []ComponentFirmwareVersionHook

var componentFirmwareVersionBeforeUpsertHooks []ComponentFirmwareVersionHook
var componentFirmwareVersionAfterUpsertHooks []ComponentFirmwareVersionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentFirmwareVersion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentFirmwareVersion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentFirmwareVersion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentFirmwareVersion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentFirmwareVersion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentFirmwareVersion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentFirmwareVersion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentFirmwareVersion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentFirmwareVersion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentFirmwareVersionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentFirmwareVersionHook registers your hook function for all future operations.
func AddComponentFirmwareVersionHook(hookPoint boil.HookPoint, componentFirmwareVersionHook ComponentFirmwareVersionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentFirmwareVersionAfterSelectHooks = append(componentFirmwareVersionAfterSelectHooks, componentFirmwareVersionHook)
	case boil.BeforeInsertHook:
		componentFirmwareVersionBeforeInsertHooks = append(componentFirmwareVersionBeforeInsertHooks, componentFirmwareVersionHook)
	case boil.AfterInsertHook:
		componentFirmwareVersionAfterInsertHooks = append(componentFirmwareVersionAfterInsertHooks, componentFirmwareVersionHook)
	case boil.BeforeUpdateHook:
		componentFirmwareVersionBeforeUpdateHooks = append(componentFirmwareVersionBeforeUpdateHooks, componentFirmwareVersionHook)
	case boil.AfterUpdateHook:
		componentFirmwareVersionAfterUpdateHooks = append(componentFirmwareVersionAfterUpdateHooks, componentFirmwareVersionHook)
	case boil.BeforeDeleteHook:
		componentFirmwareVersionBeforeDeleteHooks = append(componentFirmwareVersionBeforeDeleteHooks, componentFirmwareVersionHook)
	case boil.AfterDeleteHook:
		componentFirmwareVersionAfterDeleteHooks = append(componentFirmwareVersionAfterDeleteHooks, componentFirmwareVersionHook)
	case boil.BeforeUpsertHook:
		componentFirmwareVersionBeforeUpsertHooks = append(componentFirmwareVersionBeforeUpsertHooks, componentFirmwareVersionHook)
	case boil.AfterUpsertHook:
		componentFirmwareVersionAfterUpsertHooks = append(componentFirmwareVersionAfterUpsertHooks, componentFirmwareVersionHook)
	}
}

// One returns a single componentFirmwareVersion record from the query.
func (q componentFirmwareVersionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentFirmwareVersion, error) {
	o := &ComponentFirmwareVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_firmware_version")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentFirmwareVersion records from the query.
func (q componentFirmwareVersionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentFirmwareVersionSlice, error) {
	var o []*ComponentFirmwareVersion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentFirmwareVersion slice")
	}

	if len(componentFirmwareVersionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentFirmwareVersion records in the query.
func (q componentFirmwareVersionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_firmware_version rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentFirmwareVersionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_firmware_version exists")
	}

	return count > 0, nil
}

// ComponentFirmwareVersions retrieves all the records using an executor.
func ComponentFirmwareVersions(mods ...qm.QueryMod) componentFirmwareVersionQuery {
	mods = append(mods, qm.From("\"component_firmware_version\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_firmware_version\".*"})
	}

	return componentFirmwareVersionQuery{q}
}

// FindComponentFirmwareVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentFirmwareVersion(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ComponentFirmwareVersion, error) {
	componentFirmwareVersionObj := &ComponentFirmwareVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_firmware_version\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, componentFirmwareVersionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_firmware_version")
	}

	if err = componentFirmwareVersionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentFirmwareVersionObj, err
	}

	return componentFirmwareVersionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentFirmwareVersion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_firmware_version provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentFirmwareVersionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentFirmwareVersionInsertCacheMut.RLock()
	cache, cached := componentFirmwareVersionInsertCache[key]
	componentFirmwareVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentFirmwareVersionAllColumns,
			componentFirmwareVersionColumnsWithDefault,
			componentFirmwareVersionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentFirmwareVersionType, componentFirmwareVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentFirmwareVersionType, componentFirmwareVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_firmware_version\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_firmware_version\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_firmware_version")
	}

	if !cached {
		componentFirmwareVersionInsertCacheMut.Lock()
		componentFirmwareVersionInsertCache[key] = cache
		componentFirmwareVersionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentFirmwareVersion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentFirmwareVersion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentFirmwareVersionUpdateCacheMut.RLock()
	cache, cached := componentFirmwareVersionUpdateCache[key]
	componentFirmwareVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentFirmwareVersionAllColumns,
			componentFirmwareVersionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_firmware_version, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_firmware_version\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, componentFirmwareVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentFirmwareVersionType, componentFirmwareVersionMapping, append(wl, componentFirmwareVersionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_firmware_version row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_firmware_version")
	}

	if !cached {
		componentFirmwareVersionUpdateCacheMut.Lock()
		componentFirmwareVersionUpdateCache[key] = cache
		componentFirmwareVersionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentFirmwareVersionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_firmware_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_firmware_version")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentFirmwareVersionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentFirmwareVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_firmware_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, componentFirmwareVersionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentFirmwareVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentFirmwareVersion")
	}
	return rowsAff, nil
}

// Delete deletes a single ComponentFirmwareVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentFirmwareVersion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentFirmwareVersion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentFirmwareVersionPrimaryKeyMapping)
	sql := "DELETE FROM \"component_firmware_version\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_firmware_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_firmware_version")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentFirmwareVersionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentFirmwareVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_firmware_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_firmware_version")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentFirmwareVersionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentFirmwareVersionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentFirmwareVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_firmware_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentFirmwareVersionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentFirmwareVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_firmware_version")
	}

	if len(componentFirmwareVersionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentFirmwareVersion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentFirmwareVersion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentFirmwareVersionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentFirmwareVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentFirmwareVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_firmware_version\".* FROM \"component_firmware_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentFirmwareVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentFirmwareVersionSlice")
	}

	*o = slice

	return nil
}

// ComponentFirmwareVersionExists checks if the ComponentFirmwareVersion row exists.
func ComponentFirmwareVersionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_firmware_version\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_firmware_version exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentFirmwareVersion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_firmware_version provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentFirmwareVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentFirmwareVersionUpsertCacheMut.RLock()
	cache, cached := componentFirmwareVersionUpsertCache[key]
	componentFirmwareVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentFirmwareVersionAllColumns,
			componentFirmwareVersionColumnsWithDefault,
			componentFirmwareVersionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			componentFirmwareVersionAllColumns,
			componentFirmwareVersionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_firmware_version, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentFirmwareVersionPrimaryKeyColumns))
			copy(conflict, componentFirmwareVersionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"component_firmware_version\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentFirmwareVersionType, componentFirmwareVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentFirmwareVersionType, componentFirmwareVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_firmware_version")
	}

	if !cached {
		componentFirmwareVersionUpsertCacheMut.Lock()
		componentFirmwareVersionUpsertCache[key] = cache
		componentFirmwareVersionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

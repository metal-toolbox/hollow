// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServerComponent is an object representing the database table.
type ServerComponent struct {
	ID                    string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                  null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Vendor                null.String `boil:"vendor" json:"vendor,omitempty" toml:"vendor" yaml:"vendor,omitempty"`
	Model                 null.String `boil:"model" json:"model,omitempty" toml:"model" yaml:"model,omitempty"`
	Serial                null.String `boil:"serial" json:"serial,omitempty" toml:"serial" yaml:"serial,omitempty"`
	ServerComponentTypeID string      `boil:"server_component_type_id" json:"server_component_type_id" toml:"server_component_type_id" yaml:"server_component_type_id"`
	ServerID              string      `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	CreatedAt             null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt             null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *serverComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerComponentColumns = struct {
	ID                    string
	Name                  string
	Vendor                string
	Model                 string
	Serial                string
	ServerComponentTypeID string
	ServerID              string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	Name:                  "name",
	Vendor:                "vendor",
	Model:                 "model",
	Serial:                "serial",
	ServerComponentTypeID: "server_component_type_id",
	ServerID:              "server_id",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var ServerComponentTableColumns = struct {
	ID                    string
	Name                  string
	Vendor                string
	Model                 string
	Serial                string
	ServerComponentTypeID string
	ServerID              string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "server_components.id",
	Name:                  "server_components.name",
	Vendor:                "server_components.vendor",
	Model:                 "server_components.model",
	Serial:                "server_components.serial",
	ServerComponentTypeID: "server_components.server_component_type_id",
	ServerID:              "server_components.server_id",
	CreatedAt:             "server_components.created_at",
	UpdatedAt:             "server_components.updated_at",
}

// Generated where

var ServerComponentWhere = struct {
	ID                    whereHelperstring
	Name                  whereHelpernull_String
	Vendor                whereHelpernull_String
	Model                 whereHelpernull_String
	Serial                whereHelpernull_String
	ServerComponentTypeID whereHelperstring
	ServerID              whereHelperstring
	CreatedAt             whereHelpernull_Time
	UpdatedAt             whereHelpernull_Time
}{
	ID:                    whereHelperstring{field: "\"server_components\".\"id\""},
	Name:                  whereHelpernull_String{field: "\"server_components\".\"name\""},
	Vendor:                whereHelpernull_String{field: "\"server_components\".\"vendor\""},
	Model:                 whereHelpernull_String{field: "\"server_components\".\"model\""},
	Serial:                whereHelpernull_String{field: "\"server_components\".\"serial\""},
	ServerComponentTypeID: whereHelperstring{field: "\"server_components\".\"server_component_type_id\""},
	ServerID:              whereHelperstring{field: "\"server_components\".\"server_id\""},
	CreatedAt:             whereHelpernull_Time{field: "\"server_components\".\"created_at\""},
	UpdatedAt:             whereHelpernull_Time{field: "\"server_components\".\"updated_at\""},
}

// ServerComponentRels is where relationship names are stored.
var ServerComponentRels = struct {
	Server              string
	ServerComponentType string
	Attributes          string
	VersionedAttributes string
}{
	Server:              "Server",
	ServerComponentType: "ServerComponentType",
	Attributes:          "Attributes",
	VersionedAttributes: "VersionedAttributes",
}

// serverComponentR is where relationships are stored.
type serverComponentR struct {
	Server              *Server                 `boil:"Server" json:"Server" toml:"Server" yaml:"Server"`
	ServerComponentType *ServerComponentType    `boil:"ServerComponentType" json:"ServerComponentType" toml:"ServerComponentType" yaml:"ServerComponentType"`
	Attributes          AttributeSlice          `boil:"Attributes" json:"Attributes" toml:"Attributes" yaml:"Attributes"`
	VersionedAttributes VersionedAttributeSlice `boil:"VersionedAttributes" json:"VersionedAttributes" toml:"VersionedAttributes" yaml:"VersionedAttributes"`
}

// NewStruct creates a new relationship struct
func (*serverComponentR) NewStruct() *serverComponentR {
	return &serverComponentR{}
}

// serverComponentL is where Load methods for each relationship are stored.
type serverComponentL struct{}

var (
	serverComponentAllColumns            = []string{"id", "name", "vendor", "model", "serial", "server_component_type_id", "server_id", "created_at", "updated_at"}
	serverComponentColumnsWithoutDefault = []string{"server_component_type_id", "server_id"}
	serverComponentColumnsWithDefault    = []string{"id", "name", "vendor", "model", "serial", "created_at", "updated_at"}
	serverComponentPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServerComponentSlice is an alias for a slice of pointers to ServerComponent.
	// This should almost always be used instead of []ServerComponent.
	ServerComponentSlice []*ServerComponent
	// ServerComponentHook is the signature for custom ServerComponent hook methods
	ServerComponentHook func(context.Context, boil.ContextExecutor, *ServerComponent) error

	serverComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverComponentType                 = reflect.TypeOf(&ServerComponent{})
	serverComponentMapping              = queries.MakeStructMapping(serverComponentType)
	serverComponentPrimaryKeyMapping, _ = queries.BindMapping(serverComponentType, serverComponentMapping, serverComponentPrimaryKeyColumns)
	serverComponentInsertCacheMut       sync.RWMutex
	serverComponentInsertCache          = make(map[string]insertCache)
	serverComponentUpdateCacheMut       sync.RWMutex
	serverComponentUpdateCache          = make(map[string]updateCache)
	serverComponentUpsertCacheMut       sync.RWMutex
	serverComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverComponentBeforeInsertHooks []ServerComponentHook
var serverComponentBeforeUpdateHooks []ServerComponentHook
var serverComponentBeforeDeleteHooks []ServerComponentHook
var serverComponentBeforeUpsertHooks []ServerComponentHook

var serverComponentAfterInsertHooks []ServerComponentHook
var serverComponentAfterSelectHooks []ServerComponentHook
var serverComponentAfterUpdateHooks []ServerComponentHook
var serverComponentAfterDeleteHooks []ServerComponentHook
var serverComponentAfterUpsertHooks []ServerComponentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerComponentHook registers your hook function for all future operations.
func AddServerComponentHook(hookPoint boil.HookPoint, serverComponentHook ServerComponentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		serverComponentBeforeInsertHooks = append(serverComponentBeforeInsertHooks, serverComponentHook)
	case boil.BeforeUpdateHook:
		serverComponentBeforeUpdateHooks = append(serverComponentBeforeUpdateHooks, serverComponentHook)
	case boil.BeforeDeleteHook:
		serverComponentBeforeDeleteHooks = append(serverComponentBeforeDeleteHooks, serverComponentHook)
	case boil.BeforeUpsertHook:
		serverComponentBeforeUpsertHooks = append(serverComponentBeforeUpsertHooks, serverComponentHook)
	case boil.AfterInsertHook:
		serverComponentAfterInsertHooks = append(serverComponentAfterInsertHooks, serverComponentHook)
	case boil.AfterSelectHook:
		serverComponentAfterSelectHooks = append(serverComponentAfterSelectHooks, serverComponentHook)
	case boil.AfterUpdateHook:
		serverComponentAfterUpdateHooks = append(serverComponentAfterUpdateHooks, serverComponentHook)
	case boil.AfterDeleteHook:
		serverComponentAfterDeleteHooks = append(serverComponentAfterDeleteHooks, serverComponentHook)
	case boil.AfterUpsertHook:
		serverComponentAfterUpsertHooks = append(serverComponentAfterUpsertHooks, serverComponentHook)
	}
}

// One returns a single serverComponent record from the query.
func (q serverComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerComponent, error) {
	o := &ServerComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerComponent records from the query.
func (q serverComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerComponentSlice, error) {
	var o []*ServerComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerComponent slice")
	}

	if len(serverComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerComponent records in the query.
func (q serverComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_components rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_components exists")
	}

	return count > 0, nil
}

// Server pointed to by the foreign key.
func (o *ServerComponent) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Servers(queryMods...)
	queries.SetFrom(query.Query, "\"servers\"")

	return query
}

// ServerComponentType pointed to by the foreign key.
func (o *ServerComponent) ServerComponentType(mods ...qm.QueryMod) serverComponentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerComponentTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := ServerComponentTypes(queryMods...)
	queries.SetFrom(query.Query, "\"server_component_types\"")

	return query
}

// Attributes retrieves all the attribute's Attributes with an executor.
func (o *ServerComponent) Attributes(mods ...qm.QueryMod) attributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attributes\".\"server_component_id\"=?", o.ID),
	)

	query := Attributes(queryMods...)
	queries.SetFrom(query.Query, "\"attributes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"attributes\".*"})
	}

	return query
}

// VersionedAttributes retrieves all the versioned_attribute's VersionedAttributes with an executor.
func (o *ServerComponent) VersionedAttributes(mods ...qm.QueryMod) versionedAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"versioned_attributes\".\"server_component_id\"=?", o.ID),
	)

	query := VersionedAttributes(queryMods...)
	queries.SetFrom(query.Query, "\"versioned_attributes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"versioned_attributes\".*"})
	}

	return query
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverComponentL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerComponent interface{}, mods queries.Applicator) error {
	var slice []*ServerComponent
	var object *ServerComponent

	if singular {
		object = maybeServerComponent.(*ServerComponent)
	} else {
		slice = *maybeServerComponent.(*[]*ServerComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverComponentR{}
		}
		args = append(args, object.ServerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverComponentR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.ServerComponents = append(foreign.R.ServerComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.ServerComponents = append(foreign.R.ServerComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadServerComponentType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverComponentL) LoadServerComponentType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerComponent interface{}, mods queries.Applicator) error {
	var slice []*ServerComponent
	var object *ServerComponent

	if singular {
		object = maybeServerComponent.(*ServerComponent)
	} else {
		slice = *maybeServerComponent.(*[]*ServerComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverComponentR{}
		}
		args = append(args, object.ServerComponentTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverComponentR{}
			}

			for _, a := range args {
				if a == obj.ServerComponentTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ServerComponentTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_component_types`),
		qm.WhereIn(`server_component_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerComponentType")
	}

	var resultSlice []*ServerComponentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerComponentType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_component_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_component_types")
	}

	if len(serverComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerComponentType = foreign
		if foreign.R == nil {
			foreign.R = &serverComponentTypeR{}
		}
		foreign.R.ServerComponents = append(foreign.R.ServerComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerComponentTypeID == foreign.ID {
				local.R.ServerComponentType = foreign
				if foreign.R == nil {
					foreign.R = &serverComponentTypeR{}
				}
				foreign.R.ServerComponents = append(foreign.R.ServerComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverComponentL) LoadAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerComponent interface{}, mods queries.Applicator) error {
	var slice []*ServerComponent
	var object *ServerComponent

	if singular {
		object = maybeServerComponent.(*ServerComponent)
	} else {
		slice = *maybeServerComponent.(*[]*ServerComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverComponentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverComponentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.server_component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attributes")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(attributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Attributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attributeR{}
			}
			foreign.R.ServerComponent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ServerComponentID) {
				local.R.Attributes = append(local.R.Attributes, foreign)
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.ServerComponent = local
				break
			}
		}
	}

	return nil
}

// LoadVersionedAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverComponentL) LoadVersionedAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerComponent interface{}, mods queries.Applicator) error {
	var slice []*ServerComponent
	var object *ServerComponent

	if singular {
		object = maybeServerComponent.(*ServerComponent)
	} else {
		slice = *maybeServerComponent.(*[]*ServerComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverComponentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverComponentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`versioned_attributes`),
		qm.WhereIn(`versioned_attributes.server_component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load versioned_attributes")
	}

	var resultSlice []*VersionedAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice versioned_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on versioned_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for versioned_attributes")
	}

	if len(versionedAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionedAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &versionedAttributeR{}
			}
			foreign.R.ServerComponent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ServerComponentID) {
				local.R.VersionedAttributes = append(local.R.VersionedAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &versionedAttributeR{}
				}
				foreign.R.ServerComponent = local
				break
			}
		}
	}

	return nil
}

// SetServer of the serverComponent to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.ServerComponents.
func (o *ServerComponent) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &serverComponentR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			ServerComponents: ServerComponentSlice{o},
		}
	} else {
		related.R.ServerComponents = append(related.R.ServerComponents, o)
	}

	return nil
}

// SetServerComponentType of the serverComponent to the related item.
// Sets o.R.ServerComponentType to related.
// Adds o to related.R.ServerComponents.
func (o *ServerComponent) SetServerComponentType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerComponentType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_component_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerComponentTypeID = related.ID
	if o.R == nil {
		o.R = &serverComponentR{
			ServerComponentType: related,
		}
	} else {
		o.R.ServerComponentType = related
	}

	if related.R == nil {
		related.R = &serverComponentTypeR{
			ServerComponents: ServerComponentSlice{o},
		}
	} else {
		related.R.ServerComponents = append(related.R.ServerComponents, o)
	}

	return nil
}

// AddAttributes adds the given related objects to the existing relationships
// of the server_component, optionally inserting them as new records.
// Appends related to o.R.Attributes.
// Sets related.R.ServerComponent appropriately.
func (o *ServerComponent) AddAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Attribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ServerComponentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_component_id"}),
				strmangle.WhereClause("\"", "\"", 2, attributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ServerComponentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serverComponentR{
			Attributes: related,
		}
	} else {
		o.R.Attributes = append(o.R.Attributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attributeR{
				ServerComponent: o,
			}
		} else {
			rel.R.ServerComponent = o
		}
	}
	return nil
}

// SetAttributes removes all previously related items of the
// server_component replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ServerComponent's Attributes accordingly.
// Replaces o.R.Attributes with related.
// Sets related.R.ServerComponent's Attributes accordingly.
func (o *ServerComponent) SetAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Attribute) error {
	query := "update \"attributes\" set \"server_component_id\" = null where \"server_component_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Attributes {
			queries.SetScanner(&rel.ServerComponentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ServerComponent = nil
		}

		o.R.Attributes = nil
	}
	return o.AddAttributes(ctx, exec, insert, related...)
}

// RemoveAttributes relationships from objects passed in.
// Removes related items from R.Attributes (uses pointer comparison, removal does not keep order)
// Sets related.R.ServerComponent.
func (o *ServerComponent) RemoveAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*Attribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ServerComponentID, nil)
		if rel.R != nil {
			rel.R.ServerComponent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("server_component_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Attributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Attributes)
			if ln > 1 && i < ln-1 {
				o.R.Attributes[i] = o.R.Attributes[ln-1]
			}
			o.R.Attributes = o.R.Attributes[:ln-1]
			break
		}
	}

	return nil
}

// AddVersionedAttributes adds the given related objects to the existing relationships
// of the server_component, optionally inserting them as new records.
// Appends related to o.R.VersionedAttributes.
// Sets related.R.ServerComponent appropriately.
func (o *ServerComponent) AddVersionedAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VersionedAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ServerComponentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"versioned_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_component_id"}),
				strmangle.WhereClause("\"", "\"", 2, versionedAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ServerComponentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serverComponentR{
			VersionedAttributes: related,
		}
	} else {
		o.R.VersionedAttributes = append(o.R.VersionedAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &versionedAttributeR{
				ServerComponent: o,
			}
		} else {
			rel.R.ServerComponent = o
		}
	}
	return nil
}

// SetVersionedAttributes removes all previously related items of the
// server_component replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ServerComponent's VersionedAttributes accordingly.
// Replaces o.R.VersionedAttributes with related.
// Sets related.R.ServerComponent's VersionedAttributes accordingly.
func (o *ServerComponent) SetVersionedAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VersionedAttribute) error {
	query := "update \"versioned_attributes\" set \"server_component_id\" = null where \"server_component_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VersionedAttributes {
			queries.SetScanner(&rel.ServerComponentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ServerComponent = nil
		}

		o.R.VersionedAttributes = nil
	}
	return o.AddVersionedAttributes(ctx, exec, insert, related...)
}

// RemoveVersionedAttributes relationships from objects passed in.
// Removes related items from R.VersionedAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.ServerComponent.
func (o *ServerComponent) RemoveVersionedAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*VersionedAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ServerComponentID, nil)
		if rel.R != nil {
			rel.R.ServerComponent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("server_component_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VersionedAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.VersionedAttributes)
			if ln > 1 && i < ln-1 {
				o.R.VersionedAttributes[i] = o.R.VersionedAttributes[ln-1]
			}
			o.R.VersionedAttributes = o.R.VersionedAttributes[:ln-1]
			break
		}
	}

	return nil
}

// ServerComponents retrieves all the records using an executor.
func ServerComponents(mods ...qm.QueryMod) serverComponentQuery {
	mods = append(mods, qm.From("\"server_components\""))
	return serverComponentQuery{NewQuery(mods...)}
}

// FindServerComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerComponent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerComponent, error) {
	serverComponentObj := &ServerComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_components\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverComponentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_components")
	}

	if err = serverComponentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverComponentObj, err
	}

	return serverComponentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_components provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverComponentInsertCacheMut.RLock()
	cache, cached := serverComponentInsertCache[key]
	serverComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverComponentAllColumns,
			serverComponentColumnsWithDefault,
			serverComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverComponentType, serverComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverComponentType, serverComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_components\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_components\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_components")
	}

	if !cached {
		serverComponentInsertCacheMut.Lock()
		serverComponentInsertCache[key] = cache
		serverComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverComponentUpdateCacheMut.RLock()
	cache, cached := serverComponentUpdateCache[key]
	serverComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverComponentAllColumns,
			serverComponentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_components\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverComponentType, serverComponentMapping, append(wl, serverComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_components")
	}

	if !cached {
		serverComponentUpdateCacheMut.Lock()
		serverComponentUpdateCache[key] = cache
		serverComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_components")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverComponentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverComponent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_components provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverComponentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverComponentUpsertCacheMut.RLock()
	cache, cached := serverComponentUpsertCache[key]
	serverComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverComponentAllColumns,
			serverComponentColumnsWithDefault,
			serverComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverComponentAllColumns,
			serverComponentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_components, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverComponentPrimaryKeyColumns))
			copy(conflict, serverComponentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_components\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverComponentType, serverComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverComponentType, serverComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_components")
	}

	if !cached {
		serverComponentUpsertCacheMut.Lock()
		serverComponentUpsertCache[key] = cache
		serverComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ServerComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverComponentPrimaryKeyMapping)
	sql := "DELETE FROM \"server_components\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_components")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverComponentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_components")
	}

	if len(serverComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerComponent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_components\".* FROM \"server_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerComponentSlice")
	}

	*o = slice

	return nil
}

// ServerComponentExists checks if the ServerComponent row exists.
func ServerComponentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_components\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_components exists")
	}

	return exists, nil
}

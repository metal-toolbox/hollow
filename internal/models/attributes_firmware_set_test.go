// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testAttributesFirmwareSetsUpsert(t *testing.T) {
	t.Parallel()

	if len(attributesFirmwareSetAllColumns) == len(attributesFirmwareSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AttributesFirmwareSet{}
	if err = randomize.Struct(seed, &o, attributesFirmwareSetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributesFirmwareSet: %s", err)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributesFirmwareSetDBTypes, false, attributesFirmwareSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributesFirmwareSet: %s", err)
	}

	count, err = AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributesFirmwareSets(t *testing.T) {
	t.Parallel()

	query := AttributesFirmwareSets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributesFirmwareSetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesFirmwareSetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AttributesFirmwareSets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesFirmwareSetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributesFirmwareSetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesFirmwareSetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributesFirmwareSetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AttributesFirmwareSet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributesFirmwareSetExists to return true, but got false.")
	}
}

func testAttributesFirmwareSetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributesFirmwareSetFound, err := FindAttributesFirmwareSet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributesFirmwareSetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributesFirmwareSetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AttributesFirmwareSets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributesFirmwareSetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AttributesFirmwareSets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributesFirmwareSetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributesFirmwareSetOne := &AttributesFirmwareSet{}
	attributesFirmwareSetTwo := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, attributesFirmwareSetOne, attributesFirmwareSetDBTypes, false, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}
	if err = randomize.Struct(seed, attributesFirmwareSetTwo, attributesFirmwareSetDBTypes, false, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributesFirmwareSetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributesFirmwareSetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributesFirmwareSets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributesFirmwareSetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributesFirmwareSetOne := &AttributesFirmwareSet{}
	attributesFirmwareSetTwo := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, attributesFirmwareSetOne, attributesFirmwareSetDBTypes, false, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}
	if err = randomize.Struct(seed, attributesFirmwareSetTwo, attributesFirmwareSetDBTypes, false, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributesFirmwareSetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributesFirmwareSetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributesFirmwareSetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func attributesFirmwareSetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributesFirmwareSet) error {
	*o = AttributesFirmwareSet{}
	return nil
}

func testAttributesFirmwareSetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AttributesFirmwareSet{}
	o := &AttributesFirmwareSet{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet object: %s", err)
	}

	AddAttributesFirmwareSetHook(boil.BeforeInsertHook, attributesFirmwareSetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetBeforeInsertHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.AfterInsertHook, attributesFirmwareSetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetAfterInsertHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.AfterSelectHook, attributesFirmwareSetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetAfterSelectHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.BeforeUpdateHook, attributesFirmwareSetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetBeforeUpdateHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.AfterUpdateHook, attributesFirmwareSetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetAfterUpdateHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.BeforeDeleteHook, attributesFirmwareSetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetBeforeDeleteHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.AfterDeleteHook, attributesFirmwareSetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetAfterDeleteHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.BeforeUpsertHook, attributesFirmwareSetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetBeforeUpsertHooks = []AttributesFirmwareSetHook{}

	AddAttributesFirmwareSetHook(boil.AfterUpsertHook, attributesFirmwareSetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributesFirmwareSetAfterUpsertHooks = []AttributesFirmwareSetHook{}
}

func testAttributesFirmwareSetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributesFirmwareSetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attributesFirmwareSetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributesFirmwareSetToOneComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AttributesFirmwareSet
	var foreign ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, componentFirmwareSetDBTypes, false, componentFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FirmwareSetID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FirmwareSet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AttributesFirmwareSetSlice{&local}
	if err = local.L.LoadFirmwareSet(ctx, tx, false, (*[]*AttributesFirmwareSet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FirmwareSet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FirmwareSet = nil
	if err = local.L.LoadFirmwareSet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FirmwareSet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAttributesFirmwareSetToOneSetOpComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributesFirmwareSet
	var b, c ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributesFirmwareSetDBTypes, false, strmangle.SetComplement(attributesFirmwareSetPrimaryKeyColumns, attributesFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ComponentFirmwareSet{&b, &c} {
		err = a.SetFirmwareSet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FirmwareSet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FirmwareSetAttributesFirmwareSets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FirmwareSetID, x.ID) {
			t.Error("foreign key was wrong value", a.FirmwareSetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FirmwareSetID))
		reflect.Indirect(reflect.ValueOf(&a.FirmwareSetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FirmwareSetID, x.ID) {
			t.Error("foreign key was wrong value", a.FirmwareSetID, x.ID)
		}
	}
}

func testAttributesFirmwareSetToOneRemoveOpComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributesFirmwareSet
	var b ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributesFirmwareSetDBTypes, false, strmangle.SetComplement(attributesFirmwareSetPrimaryKeyColumns, attributesFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFirmwareSet(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFirmwareSet(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FirmwareSet().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FirmwareSet != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FirmwareSetID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FirmwareSetAttributesFirmwareSets) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAttributesFirmwareSetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributesFirmwareSetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributesFirmwareSetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributesFirmwareSetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributesFirmwareSets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributesFirmwareSetDBTypes = map[string]string{`ID`: `uuid`, `FirmwareSetID`: `uuid`, `Namespace`: `string`, `Data`: `jsonb`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                            = bytes.MinRead
)

func testAttributesFirmwareSetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributesFirmwareSetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributesFirmwareSetAllColumns) == len(attributesFirmwareSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributesFirmwareSetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributesFirmwareSetAllColumns) == len(attributesFirmwareSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributesFirmwareSet{}
	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributesFirmwareSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributesFirmwareSetDBTypes, true, attributesFirmwareSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributesFirmwareSet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributesFirmwareSetAllColumns, attributesFirmwareSetPrimaryKeyColumns) {
		fields = attributesFirmwareSetAllColumns
	} else {
		fields = strmangle.SetComplement(
			attributesFirmwareSetAllColumns,
			attributesFirmwareSetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributesFirmwareSetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
